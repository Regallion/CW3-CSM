#This is the core CWDig script. It must be included somewhere on the map for every CWDig map. This script handles all terrain modifications as well as modifying global creeper settings.
#
#     	 IMPORTANT NOTE
#		I M P O R T A N T
#		 IMPORTANT NOTE
#			|	|	|
# 	    	V	V	V
#
#	Make sure to enable the RefreshTerrain option at least once before finalizing your map. Just set the value to 1 and let the game run for a frame. As long as you don't change any terrain after doing this you should be fine. The reason you have to do this is because height 10 and height 0 terrain are handled in special ways, and can leave "remnant" terrain overrides if you change normal terrain to void terrain. 

#You will also find that adding new height 10 terrain will not be permanent unless you run a RefreshTerrain before unpausing the game. This is because I had to add measures to prevent the player from terping cells up to 10 manually to receive the "inifinite height wall" effect. Having the script accomplish this would normally be very difficult and resource intensive, but I used a workaround that caused the script to not pick up new height 10 terrain you've added in the editor. You can solve this by just refreshing the terrain as soon as you add a new batch of height 10 terrain.
##################################################################################


#The timer determines how often this script runs. I usually leave it at a value of 30 (once per second) when editing and testing the map, then lower it to 5 or 10 when publishing the map. Terrain scripts are very resource intensive so you don't want to run it every frame. Keeping the value high means any time you modify terrain with terps it will be slow to update the override, but keeping it high will also greatly help performance. That's why I keep it set high when I'm testing the map but lower it before publishing to make it feel "smoother".
$Timer:30
#The multi value determines the "strength" of the terrain on the map. The default value of 10 means terrain will be 10 times as powerful, so creeper must be 10 levels deep to move up to the next terrain level. I experimented with high values such as a 100 multi, but it causes issues with void overflow. This can be averted with terrain overrides on void, but then you run into issues with handling digi on void so I opted to keep the multis in a range that doesn't necessitate creepr in the 500+ range.
$Multi:10
#FlowRL and FlowUD change the global creeper flow rate. 
$FlowRL:1.0
$FlowUD:1.0
#DigiFlowRL and DigiFlowUD change the global creeper flow rate when on digitalis.
$DigiFlowRL:1.0
$DigiFlowUD:1.0
#Evaporation modifies the global creeper evaporation rate
$Evaporation:1000
#Enable the RefreshTerrain option to reset all terrain overrides. This is important to do before finalizing your map in case there are remnant overrides from cells that you've since changed the terrain for.
$RefreshTerrain:0
#Enable freeze before resizing a map to prevent a game breaking glitch that will ruin your map upon resizing. You've been warned!
$Freeze:0
$Voidaffects:1 #if 1, void is overriden too.
$Name:"walldigger"

<-Freeze if
	once
		MapHeight 0 do
			MapWidth 0 do
				I J -1 SetTerrainOverride
			loop
		loop
	endonce
else
	once
	@awake
	#Make sure the creeper never exceeds 2000 since that's the override we're using for height 10 terrain.
	2000000000 SetCreeperMax 2000000000 SetAntiCreeperMax
	# Set all height 10 terrain to an override of 2000. This makes 10 height walls practically impassable for creep until terped down.
	MapHeight 0 do
		MapWidth 0 do
			I J GetTerrain 10 eq I J GetTerrain -1 eq <-Voidaffects 1 eq and I J GetTerrainOverride 499 1500 <-Voidaffects mul add neq and or if
				I J 2000 SetTerrainOverride
			else
				#If the terrain is not height 10, we will reset the terrain override if RefreshTerrain is enabled.
				<-RefreshTerrain I J GetTerrainOverride 499 1500 <-Voidaffects mul add neq and if
					I J -1 SetTerrainOverride
				endif
			endif
		loop
	loop
	#Now that we've processed the terrain refresh, reset the state of the variable so it doesn't execute again until the mapmaker re-enables it.
	0 ->RefreshTerrain
	# Set flow rate and related values for the map. Makes things more interesting for C vs AC maps. 
	<-FlowRL SetCreeperFlowRateRL <-FlowUD SetCreeperFlowRateUD <-DigiFlowRL SetCreeperFlowRateOnDigitalisRL <-DigiFlowUD SetCreeperFlowRateOnDigitalisUD 
	# Evaporation limit. Determines how thin creeper must be to begin evaporating. I've scaled the default value up to match the default multi, but also decreased it by a power for less evaporation than normal
	<-Evaporation SetCreeperEvaporationLimit
	endonce

	# This checks all tiles on the map and multiplies the terrain by your designated multi (10 by default) to get a resulting terrain override
	MapHeight 0 do
		MapWidth 0 do	
			#First we check if the current cell is a void cell. If it is we can skip the standard code for this cell since void cell can't be created during standard gameplay and should thus never have to be updated. Skipping void cells greatly improves the performance since terrain commands are quite intensive.
			if (I J GetTerrain 0 gt)
				if (I J GetTerrain 10 eq)
					if (I J GetTerrainOverride 2000 lt)
						I J 9 SetTerrain
					endif
				else
					I J dup2 getTerrain <-Multi mul SetTerrainOverride
				endif
				
			##########
			#Note:
			#
			#You can enable the TerrainOverride I've commented out below to update every void cell to its standard override every invocation. This removes the need to RefreshTerrain after changing normal terrain to void, but it also increases the performance load of the script so I've disabled it by default.
			##########
			
			#else
				# I J -1 SetTerrainOverride
			endif
		loop
	loop
endif
<-Timer delay


:awake
Self "main" "none" SetImage
Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute
Self CONST_TAKEMAPSPACE 0 SetUnitAttribute
Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute
