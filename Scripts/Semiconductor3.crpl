# Semiconductor3.crpl
# Created on: 11/13/2018 10:30:44 PM
# ------------------------------------------

$C_Right:"in"
$C_Top:"out"
$C_Left:"both"
$C_Bottom:"none"

$AC_Right:"none"
$AC_Top:"in"
$AC_Left:"out"
$AC_Bottom:"both"

$Size:3 # width and height in cell, this semiconductor must have a square size

$ImageBase:"Custom4_128"
$ImageArrow:"Custom41"

once
    ShowTraceLog
    ClearTraceLog
    HideTraceLog
    
    Self CONST_CELLWIDTH <-Size SetUnitAttribute
    Self CONST_CELLHEIGHT <-Size SetUnitAttribute
    
    CurrentX <-Size 2 div sub ->StartX
    CurrentY <-Size 2 div sub ->StartY
    
    <-StartX <-Size add <-StartX do
        <-StartY <-Size add <-StartY do
            #set terrain to max -> it will easily prevent the creeper flow
            J I 10 SetTerrain
            J I 2000 SetTerrainOverride
        loop
    loop
    
    @InitSides
    @InitChannels
    @SetImages
    @Awake
    
endonce

<-CANWORK_C if
    @SpreadC
endif
<-CANWORK_AC if
    @SpreadAC
endif

:InitSides
    0 ->DIR_RIGHT
    1 ->DIR_TOP
    2 ->DIR_LEFT
    3 ->DIR_BOTTOM
    
    0 ->CH_IN
    1 ->CH_OUT
    
    0 ->CAC_C
    1 ->CAC_AC

    CreateList ->IS_DIR
    <-IS_DIR "Right"  AppendToList
    <-IS_DIR "Top"    AppendToList
    <-IS_DIR "Left"   AppendToList
    <-IS_DIR "Bottom" AppendToList
    
    CreateList ->IS_CH
    <-IS_CH "IN"  AppendToList
    <-IS_CH "OUT" AppendToList
    
    CreateList ->IS_CAC
    <-IS_CAC "C"  AppendToList
    <-IS_CAC "AC" AppendToList
    
    0 ->IS_IN_none
    1 ->IS_IN_in
    0 ->IS_IN_out
    1 ->IS_IN_both
    
    0 ->IS_OUT_none
    0 ->IS_OUT_in
    1 ->IS_OUT_out
    1 ->IS_OUT_both
    
    4 0 do #direction (0 = right, 1 = top, 2 = left, 3 = down) = K
        2 0 do # channel (in = 0, out = 1) = J
            2 0 do # C/AC (C = 0, AC = 1) = I
                <-IS_CAC I GetListElement "_" <-IS_DIR K GetListElement concat concat <-! ->config
                "IS_" <-IS_CH J GetListElement "_" <-config concat concat concat <-!
                K J I concat concat ->!
            loop
        loop
    loop
    
:InitChannels
    CreateList ->IC_CIN
    CreateList ->IC_COUT
    CreateList ->IC_ACIN
    CreateList ->IC_ACOUT
    
    4 0 do #direction (0 = right, 1 = top, 2 = left, 3 = down) = K
        2 0 do # channel (in = 0, out = 1) = J
            2 0 do # C/AC (C = 0, AC = 1) = I
                K J I concat concat <-! if
                    "IC_" <-IS_CAC I GetListElement <-IS_CH J GetListElement concat concat <-! K AppendToList
                endif
            loop
        loop
    loop
    
    <-IC_CIN  GetListCount neq0 <-IC_COUT  GetListCount neq0 and ->CANWORK_C
    <-IC_ACIN GetListCount neq0 <-IC_ACOUT GetListCount neq0 and ->CANWORK_AC
    
    <-CANWORK_C <-CANWORK_AC or if
        # init flat coords
        CreateList ->IC_CoordsX0
        CreateList ->IC_CoordsY0
        CreateList ->IC_CoordsX1
        CreateList ->IC_CoordsY1
        CreateList ->IC_CoordsX2
        CreateList ->IC_CoordsY2
        CreateList ->IC_CoordsX3
        CreateList ->IC_CoordsY3
        
        <-Size 2 div 1 add <-Size 2 div neg do
            <-IC_CoordsX0 <-Size 2 div 1 add AppendToList
            <-IC_CoordsY0 I AppendToList
        loop
        
        <-Size 0 do # rotate CCW to the next coords
            <-IC_CoordsX0 I GetListElement <-IC_CoordsY0 I GetListElement swap neg
            <-IC_CoordsY1 swap AppendToList <-IC_CoordsX1 swap AppendToList
        loop
        
        <-Size 0 do # rotate CCW to the next coords
            <-IC_CoordsX1 I GetListElement <-IC_CoordsY1 I GetListElement swap neg
            <-IC_CoordsY2 swap AppendToList <-IC_CoordsX2 swap AppendToList
        loop
        
        <-Size 0 do # rotate CCW to the next coords
            <-IC_CoordsX2 I GetListElement <-IC_CoordsY2 I GetListElement swap neg
            <-IC_CoordsY3 swap AppendToList <-IC_CoordsX3 swap AppendToList
        loop
        
        #move by core position (TODO: do this automaticly on position change?)
        4 0 do # J = direction
            <-Size 0 do # I = position index
                "IC_CoordsX" J concat <-! I dup2 GetListElement CurrentX add SetListElement
                "IC_CoordsY" J concat <-! I dup2 GetListElement CurrentY add SetListElement
            loop
        loop
    endif
    
    <-CANWORK_C if
        CreateList ->FlatCinX
        CreateList ->FlatCinY
        CreateList ->FlatCoutX
        CreateList ->FlatCoutY
        CreateList ->FlatCbothX
        CreateList ->FlatCbothY
        
        <-IC_CIN GetListCount 0 do
            <-IC_CIN I GetListElement ->dir
            <-dir <-CH_OUT <-CAC_C concat concat <-! if
                <-Size 0 do
                    "IC_CoordsX" <-dir concat <-! I GetListElement ->x
                    "IC_CoordsY" <-dir concat <-! I GetListElement ->y
                    <-x <-y GetTerrain -1 neq if
                        <-FlatCbothX <-x AppendToList
                        <-FlatCbothY <-y AppendToList
                    endif
                loop
            else
                <-Size 0 do
                    "IC_CoordsX" <-dir concat <-! I GetListElement ->x
                    "IC_CoordsY" <-dir concat <-! I GetListElement ->y
                    <-x <-y GetTerrain -1 neq if
                        <-FlatCinX <-x AppendToList
                        <-FlatCinY <-y AppendToList
                    endif
                loop
            endif
        loop
        
        <-IC_COUT GetListCount 0 do
            <-IC_COUT I GetListElement ->dir
            <-dir <-CH_IN <-CAC_C concat concat <-! not if
                <-Size 0 do
                    "IC_CoordsX" <-dir concat <-! I GetListElement ->x
                    "IC_CoordsY" <-dir concat <-! I GetListElement ->y
                    <-x <-y GetTerrain -1 neq if
                        <-FlatCoutX <-x AppendToList
                        <-FlatCoutY <-y AppendToList
                    endif
                loop
            endif
        loop
    endif
    
    <-CANWORK_AC if
        CreateList ->FlatACinX
        CreateList ->FlatACinY
        CreateList ->FlatACoutX
        CreateList ->FlatACoutY
        CreateList ->FlatACbothX
        CreateList ->FlatACbothY
        
        <-IC_ACIN GetListCount 0 do
            <-IC_ACIN I GetListElement ->dir
            <-dir <-CH_OUT <-CAC_AC concat concat <-! if
                <-Size 0 do
                    "IC_CoordsX" <-dir concat <-! I GetListElement ->x
                    "IC_CoordsY" <-dir concat <-! I GetListElement ->y
                    <-x <-y GetTerrain -1 neq if
                        <-FlatACbothX <-x AppendToList
                        <-FlatACbothY <-y AppendToList
                    endif
                loop
            else
                <-Size 0 do
                    "IC_CoordsX" <-dir concat <-! I GetListElement ->x
                    "IC_CoordsY" <-dir concat <-! I GetListElement ->y
                    <-x <-y GetTerrain -1 neq if
                        <-FlatACinX <-x AppendToList
                        <-FlatACinY <-y AppendToList
                    endif
                loop
            endif
        loop
        
        <-IC_ACOUT GetListCount 0 do
            <-IC_ACOUT I GetListElement ->dir
            <-dir <-CH_IN <-CAC_AC concat concat <-! not if
                <-Size 0 do
                    "IC_CoordsX" <-dir concat <-! I GetListElement ->x
                    "IC_CoordsY" <-dir concat <-! I GetListElement ->y
                    <-x <-y GetTerrain -1 neq if
                        <-FlatACoutX <-x AppendToList
                        <-FlatACoutY <-y AppendToList
                    endif
                loop
            endif
        loop
    endif
    
:SpreadC
    #Step 1.0: reset collection fields
    @SsReset
    0 ->S_Total
    
    #Step 1.1: collect IN/source fields
    <-FlatCinY <-FlatCinX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 GetCreeper 0 max ->c GetTerrainOverride ->t
        <-t -1 @SsAdd #start bleeding at terrain
        <-t <-c add 1 @SsAdd #stop bleeding at terrain + creeper
        <-S_Total <-c add ->S_Total #collect total creeper
    loop pop pop
    
    #Step 1.2: collect OUT/sink fields
    <-FlatCoutY <-FlatCoutX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 GetCreeper 0 max ->c GetTerrainOverride ->t
        <-t <-c add -1 @SsAdd #start bleeding at terrain + creeper
    loop pop pop
    
    #Step 1.3: collect IN&OUT/both fields
    <-FlatCbothY <-FlatCbothX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 GetCreeper 0 max ->c GetTerrainOverride ->t
        <-t -1 @SsAdd #start bleeding at terrain
        <-S_Total <-c add ->S_Total #collect total creeper
    loop pop pop
    
    <-S_Total 0 lte if
        return
    endif
    
    #Step 2: compute the ss lines intersection
    <-S_Total @SsIntersect ->S_Level
    
    #Step 3.1: distribute IN/source fields
    <-FlatCinY <-FlatCinX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 dup2 GetCreeper ->c GetTerrainOverride ->t
        <-S_Level <-t sub 0 max <-c min SetCreeper
        #<-S_Level <-t sub 0 max SetCreeper
    loop pop pop
    
    #Step 3.2: distribute OUT/sink fields
    <-FlatCoutY <-FlatCoutX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 dup2 GetCreeper ->c GetTerrainOverride ->t
        <-S_Level <-t sub 0 max <-c max <-c 0 min add SetCreeper # "<-c 0 max add" to handle AC properly
    loop pop pop
    
    #Step 3.3: distribute IN&OUT/both fields
    <-FlatCbothY <-FlatCbothX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 dup2 GetCreeper ->c GetTerrainOverride ->t
        <-S_Level <-t sub 0 max <-c 0 min add SetCreeper # "<-c 0 max add" to handle AC properly
        #<-S_Level <-t sub 0 max SetCreeper
    loop pop pop
    
    
:SpreadAC
    #Step 1.0: reset collection fields
    @SsReset
    0 ->S_Total
    
    #Step 1.1: collect IN/source fields
    <-FlatACinY <-FlatACinX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 GetCreeper neg 0 max ->c GetTerrainOverride ->t
        <-t -1 @SsAdd #start bleeding at terrain
        <-t <-c add 1 @SsAdd #stop bleeding at terrain + creeper
        <-S_Total <-c add ->S_Total #collect total creeper
    loop pop pop
    
    #Step 1.2: collect OUT/sink fields
    <-FlatACoutY <-FlatACoutX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 GetCreeper neg 0 max ->c GetTerrainOverride ->t
        <-t <-c add -1 @SsAdd #start bleeding at terrain + creeper
    loop pop pop
    
    #Step 1.3: collect IN&OUT/both fields
    <-FlatACbothY <-FlatACbothX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 GetCreeper neg 0 max ->c GetTerrainOverride ->t
        <-t -1 @SsAdd #start bleeding at terrain
        <-S_Total <-c add ->S_Total #collect total creeper
    loop pop pop
    
    <-S_Total 0 lte if
        return
    endif
    
    #Step 2: compute the ss lines intersection
    <-S_Total @SsIntersect ->S_Level
    
    #Step 3.1: distribute IN/source fields
    <-FlatACinY <-FlatACinX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 dup2 GetCreeper neg ->c GetTerrainOverride ->t
        <-S_Level <-t sub 0 max <-c min neg SetCreeper
        #<-S_Level <-t sub 0 max SetCreeper
    loop pop pop
    
    #Step 3.2: distribute OUT/sink fields
    <-FlatACoutY <-FlatACoutX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 dup2 GetCreeper neg ->c GetTerrainOverride ->t
        <-S_Level <-t sub 0 max <-c max <-c 0 min add neg SetCreeper # "<-c 0 max add" to handle AC properly
    loop pop pop
    
    #Step 3.3: distribute IN&OUT/both fields
    <-FlatACbothY <-FlatACbothX dup GetListCount 0 do
        dup2 I GetListElement swap I GetListElement dup2 dup2 GetCreeper neg ->c GetTerrainOverride ->t
        <-S_Level <-t sub 0 max <-c 0 min add neg SetCreeper # "<-c 0 max add" to handle AC properly
        #<-S_Level <-t sub 0 max SetCreeper
    loop pop pop
    
:SsReset
    CreateList ->SS_Index
    <-SS_Index 1000000 AppendToList
    
    CreateList ->SS_Value
    <-SS_Value 0 AppendToList
    
:SsAdd # index, value -
    ->SS_val
    ->SS_ind
    <-SS_Index dup GetListCount 0 do
        dup I GetListElement <-SS_ind dup2
        eq if
            pop pop
            <-SS_Value I dup2 GetListElement <-SS_val add SetListElement
            pop return
        endif
        gt if
            I <-SS_ind InsertListElement
            <-SS_Value I <-SS_val InsertListElement
            return
        endif
    loop pop
    
    "ERROR: this code should never be reached (A), please contact me on Discord (name: kajacx)" Trace
    
:SsIntersect # total - terrainHeight
    ->t #total amount
    0 ->h #height
    0 ->b #bleeding (negative values reduce total)
    <-SS_Index GetListCount 0 do
        <-SS_Index I GetListElement ->nextH
        <-t <-b sub(<-nextH <-h) mul add ->nextT
        <-nextT 0 lte if
            <-h <-t <-b neg div add return
        endif
        <-b <-SS_Value I GetListElement add ->b
        <-nextT ->t
        <-nextH ->h
    loop
    
    "ERROR: this code should never be reached (B), please contact me on Discord (name: kajacx)" Trace
    0 return
    
:Recolor
    GetCreeperColors
        255 mul ->AC_B 255 mul ->AC_G 255 mul ->AC_R
        255 mul ->C_B  255 mul ->C_G  255 mul ->C_R
    
    4 0 do #direction (0 = right, 1 = top, 2 = left, 3 = down) = K
        2 0 do # channel (in = 0, out = 1) = J
            2 0 do # C/AC (C = 0, AC = 1) = I
                "a" K J I concat concat concat ->name
                I eq0 if # creeper color
                    K J I concat concat <-! if
                        Self <-name <-C_R  <-C_G  <-C_B  255 SetImageColor
                    else
                        Self <-name   128    128    128  255 SetImageColor
                    endif
                else # ac color
                    K J I concat concat <-! if
                        Self <-name <-AC_R <-AC_G <-AC_B 255 SetImageColor
                    else
                        Self <-name   128    128    128  255 SetImageColor
                    endif
                endif
            loop
        loop
    loop
    
    
:SetImages
    Self RemoveImages
    
    <-Size 3.0 div ->scale
    <-scale 2.0 div ->scale2
    
    Self "main" <-ImageBase SetImage
    Self "main" <-scale dup SetImageScale
    Self "main" 0 0 0.001 SetImagePosition
    
    4 0 do #direction (0 = right, 1 = top, 2 = left, 3 = down) = K
        2 0 do # channel (in = 0, out = 1) = J
            2 0 do # C/AC (C = 0, AC = 1) = I
                "a" K J I concat concat concat ->name
                Self <-name <-ImageArrow SetImage
                
                J eq0 if # in, flip X scale
                    Self <-name <-scale2 neg SetImageScaleX
                    11.625 <-scale mul ->x
                    3.75   <-scale mul ->y
                else # out, keep X scale
                    Self <-name <-scale2     SetImageScaleX
                    6.375  <-scale mul ->x
                    -3.75  <-scale mul ->y
                endif
                
                I J eq if # keep Y scale
                    Self <-name <-scale2     SetImageScaleY
                else # flip Y scale
                    Self <-name <-scale2 neg SetImageScaleY
                endif
                
                Self <-name K 1.57079632679 mul SetImageRotation
                
                #rotate position CCW
                K 0 do
                    <-x <-y neg swap ->y ->x
                loop
                
                Self <-name <-x <-y 0 SetImagePosition 
            loop
        loop
    loop
    

:Awake
    Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
    Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute
    Self CONST_TAKEMAPSPACE 1 SetUnitAttribute
    Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute
    Self CONST_CREATEPZ 0 SetUnitAttribute
    
    @Recolor
    