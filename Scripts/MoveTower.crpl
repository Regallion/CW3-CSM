#MoveTower. Insert Chips to have effects. Depends 100% on chips to have an effect. Can be moved as long as it's empty
$ImageImmovable:"Custom20_128"
$ImageMovable:"Custom21_128"
$ImageLine:"Custom3pp"
$MoveSpeed:1.0 #Movement speed of tower
$DecontaminationCooldown:5 #Decontamination cooldown before use
$RestrictMove:0 #If restricted, can only move to 3x3 free land.
$Name:"MoveTower"
once
	0 ->Movable
	Self "DockerInterface.crpl" "Occupied" "1" SetScriptVar
	"Name" "walldigger" GetCoresWithVar if #Acquires variables from walldigger to ensure coherent terrain alterations.
		->Walldigger
		ClearStack
	endif
	<-Walldigger "walldigger.crpl" "Voidaffects" GetScriptVar ->voidmod
	<-Walldigger "walldigger.crpl" "Multi" GetScriptVar ->terrmod
	<-Walldigger "walldigger.crpl" "Freeze" GetScriptVar ->freezeterr
	@Shutdown
	1 ->Size
	#Sets states for later use
	"Name" "walldigger" GetCoresWithVar if
		->Walldigger
		ClearStack
	endif
	<-Walldigger "walldigger.crpl" "Voidaffects" GetScriptVar ->voidmod
    <-STATE_INACTIVE ->state #Starts inactive
	HideTraceLog
	ClearTraceLog
	@Awake
	Self "selector" 255 255 255 0 SetImageColor
	-1 ->InsertedChip #Assumes this is empty. If the Tower starts with a chip on top, the 1 delay on the chip will set this after the initialization
endonce
GetTimer0 eq0 if #Timer for removing temporary texts
    "" SetText
endif
<-InsertedChip -1 neq if
	once
		1 ->Liberated
		1 ->Decontaminated
		0 ->Movable
		0 SetTimer3
		Self "main" 255 255 255 255 SetImageColor
		@SetImageAndText
	endonce
endif

<-Liberated not if
Self "main" 80 80 80 255 SetImageColor
	CurrentCoords GetCreeper -4 lte if
		"Initializing decontamination procedure" SetText
		50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		150 SetTimer0
		<-DecontaminationCooldown 30 mul SetTimer3
		1 ->Liberated
		Self "main" 130 130 130 255 SetImageColor
		@SetImageAndText
	else
		@SetImageAndText
		return
	endif
endif




GetTimer3 neq0 if #Decontamination timer. Continuosly checks if the tower wasn't overtaken by creeper again. If it was, aborts the liberation.
    CurrentCoords GetCreeper -4 lte if
		@SetImageAndText
		return
	else
		"Unacceptable contamination levels, aborting decontamination" SetText
        220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		150 SetTimer0
		0 ->Liberated
		0 SetTimer3
		@SetImageAndText
		return
	endif
else
    
endif
GetTimer3 eq0 <-Liberated 1 eq <-Decontaminated 0 eq and and if #If decon successful, activates the chip.
	"Decontamination succesful" SetText
    50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
	150 SetTimer0
	Self "main" 255 255 255 255 SetImageColor
	1 ->Decontaminated
	1 ->Movable
	Self "DockerInterface.crpl" "Occupied" "0" SetScriptVar
	@SetImageAndText
endif

<-state <-STATE_INACTIVE eq if #base state
    <-InsertedChip 0 lt if
		@SetImageAndText
	else
		<-STATE_ACTIVE ->state
		"Engaging chip function" SetText

        50 220 50 255 SetTextColor 20 SetTextY 1.0 SetTextSize
        150 SetTimer0
	endif
endif
<-state <-STATE_ACTIVE eq if #when set with a chip.
    <-InsertedChip 0 gte if
		@SetImageAndText
	else
		<-STATE_INACTIVE ->state
		"Enabling Movement" SetText
        250 250 50 255 SetTextColor 20 SetTextY 1.0 SetTextSize
        150 SetTimer0
		@Shutdown
		return
	endif
    <-ChipType <-! 0 eq if #Materializer chip. Creates a stack of units under itself and maintains them in case of creeper. Destroys them if deactivated. If special, ALSO drops a PZ
		CurrentCoords GetCreeper 0 lte if
			<-Setup not if
				<-ChipSpecial "," Split ->Temp
				<-Temp 0 GetListElement ->UnitType
				<-Temp 1 GetListElement ->PZ
				<-PZ 1 eq if
					"POWERZONE" CurrentCoords CreateUnit pop
				endif
				@CreateUnits
				1 ->Setup
				180 SetTimer1
				return
			endif
			0 ->Creeped
			GetTimer1 eq0 if
				1 ->Okay
				CurrentCoords 0 0 GetAllUnitsInRange 0 do
					->unit
					<-unit GetUnitType "CRPLCORE" neq <-unit GetUnitType "POWERZONE" neq and if
						0 ->Okay
						ClearStack
						break
					endif
				loop
				<-Okay if
					@CreateUnits
				endif
			endif
		else
			1 ->Creeped
			0 ->Setup
		endif
	endif
    <-ChipType <-! 1 eq if #Negator chip. Destroys creeper in a radius every once in a while
		<-Setup not if
			<-Duration SetTimer1
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@Negate
			<-Duration SetTimer1
		endif
	endif
    <-ChipType <-! 2 eq if #Firework chip. Randomly shoots fireworks around itself.
		<-Setup not if
			<-Duration SetTimer1
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@CreateFirework
			<-Duration SetTimer1
		endif
    endif


    <-ChipType <-! 3 eq if #Variator chip. Cyclically alters nearby emitter values from base to min to max.
		<-Setup not if
			<-ChipSpecial "," Split ->Temp
			<-Temp 0 GetListElement ->MinValue
			<-Temp 1 GetListElement ->MaxValue
			<-Temp 2 GetListElement ->Mode
			<-MinValue asfloat ->MinValue
			<-MaxValue asfloat ->MaxValue
			<-Mode asint ->Mode
			<-MaxValue <-MinValue sub ->DiffValue
			<-MinValue 1 gt if
				1 ->CurrentPhase
			else
				2 ->CurrentPhase
			endif
			CreateList ->Victims
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" neq if
					<-Victims <-unit AppendToList
				endif
			loop
			<-Duration ->GoalTime
			1 ->CurrValue
			30 SetTimer1
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@Variate
			30 SetTimer1
		endif
	endif
	<-ChipType <-! 4 eq if #VoidBomb. Sucks in creeper then explodes. If special, REALLY explodes.
		<-Setup not if
			<-InsertedChip "TowerChip.crpl" "disabled" 1 SetScriptVar
			@Vacuum
			<-Duration SetTimer1
			1 ->Setup
		endif
		GetTimer1 neq0 if
			<-CreepTotal CurrentCoords GetCreeper max ->CreepTotal
			CurrentCoords CurrentCoords GetCreeper <-CreepTotal sub SetCreeper
		endif
		GetTimer1 eq0 if
			@Explode
			<-InsertedChip 0 Destroy
			Self 3 Destroy
		endif
	endif
	<-ChipType <-! 5 eq if #Energizer. Provides energy to nearby stuff
		<-Setup not if
			<-ChipSpecial "," Split ->Temp
			<-Temp 0 GetListElement ->AffectAll
			<-Temp 1 GetListElement ->Delay
			CreateList ->Energizees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-AffectAll not if
					<-unit "EmitterInterface.crpl" "UpgradeEnabled" GetScriptVar 1 eq if
						<-Energizees <-unit  AppendToList
					endif
				else
					<-Energizees <-unit  AppendToList
				endif
			loop
			<-Duration SetTimer1
			<-Delay SetTimer2
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@Energize
			<-Duration SetTimer1
		endif
		GetTimer2 eq0 if
			CreateList ->Energizees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-AffectAll not if
					<-unit "EmitterInterface.crpl" "UpgradeEnabled" GetScriptVar 1 eq if
						<-Energizees <-unit  AppendToList
					endif
				else
					<-Energizees <-unit  AppendToList
				endif
			loop
			<-Delay SetTimer2
		endif
	endif
    <-ChipType <-! 6 eq if #Entomber chip. Alters surrounding terrain.
		<-Setup not if
			@Entomb
			1 ->Setup
		endif
    endif
	<-ChipType <-! 7 eq if #ACifier. Provides AC to nearby stuff
		<-Setup not if
			<-ChipSpecial ->Delay
			CreateList ->ACees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-ACees <-unit  AppendToList
			loop
			<-Duration SetTimer1
			<-Delay SetTimer2
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@ACify
			<-Duration SetTimer1
		endif
		GetTimer2 eq0 if
			CreateList ->ACees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-ACees <-unit  AppendToList
			loop
			<-Delay SetTimer2
		endif
	endif
	<-InsertedChip "TowerChip.crpl" "TimeSpent" <-InsertedChip "TowerChip.crpl" "TimeSpent"  GetScriptVar 1 add SetScriptVar
endif
<-Movable not if
	<-selected if
		0 ->selected 
	endif
endif
<-Movable if
		#Check for click event
	0 GetMouseButtonDown if
		#Check whether the click was in the UI area of the screen. We want to ignore those clicks.
		GetMouseScreenPixelPosition 96 gt if
			#Check whether the unit is selected yet.
			<-selected eq0 if
				#If the unit is not currently selected, we check to see if the click happened within a certain radius of the unit.
				# 2 -> 0.75, 3 -> 1, 4 -> 2
				GetMouseCell CurrentCoords Distance 2 lt if
					#Make sure we didn't already select another unit this click
					"selected" 1 GetCoresWithVar dup eq0 if
						pop
						#Sets the selected state. We'll get to applying the effects in another block.
						1 ->selected
					else
						0 do
							pop
						loop
					endif
					#Kill the selection process if shift is held. Multi unit selection should not be possible for this unit, including for vanilla units.
					"RightShift" GetKey neq0 "LeftShift" GetKey neq0 or if
						0 ->selected
					endif
					#The 1 delay is to prevent aberrant behavior with clicks being processed multiple times.
					1 Delay
				endif
			else
				#This else block will execute if the unit is already selected. Now we check whether the mouse location is valid.
				<-greenShadow if
					AbortMove
					ClearQueuedMoves
					<-X <-Y PixelToCell <-MoveSpeed QueueMove
					<-Ghost 0 Destroy
					"CRPLCORE" <-X <-Y PixelToCell CreateUnit ->Ghost
					<-Ghost "Mghost.crpl" AddScriptToUnit
					<-Ghost "Mghost.crpl" "ImageNormal" <-ImageMovable SetScriptVar
					<-Ghost "Mghost.crpl" "Parent" Self SetScriptVar
					1 ->moving
					Self "DockerInterface.crpl" "Moving" "1" SetScriptVar
				endif
				0 ->greenShadow
				0 ->selected
			endif
		endif
	endif

	#Apply effects depending on selected state. Most of these could be triggered on change of the state instead, but I don't trust all states to be stored properly on save and load so I've updated these properties every frame. As long as there aren't tons of these units on the map it shouldn't be a performance concern.
	<-selected eq0 if
		#These important part of these SetImageColor commands is the final 0. That's the alpha value. That means these calls will set the images to be invisible.
		Self "shadow" 255 0 0 0 SetImageColor
		Self "range1" 255 0 0 0 SetImageColor
		self "selector" <-selectorRotation SetImageRotation
		Self "selector" 1.35 dup SetImageScale
		<-selectorRotation add(0.048 <-MoveSpeed mul) if(dup PI 2.0 mul gt) sub(PI 2.0 mul) endif ->selectorRotation
		<-moving if
			Self "selector" 0 0 0 0 SetImageColor
		else
			Self "selector" 10 10 255 225 SetImageColor
		endif
		#I don't really think this is necessary, but it's just to give the image a designated location after it stops following the mouse.
		self "shadow" 0 0 -5.9 SetImagePosition
	else
		#If the unit is selected first we display the selector image.
		Self "selector" 255 255 255 255 SetImageColor
		<-selectorRotation add(0.096 <-MoveSpeed mul) if(dup PI 2.0 mul gt) sub(PI 2.0 mul) endif ->selectorRotation
		self "selector" <-selectorRotation SetImageRotation
		
		<-RestrictMove if
			@ValidateMove
		else
			GetMousePosition ->Y ->X 
			1 ->greenShadow
		endif
		<-greenShadow if
			Self "shadow" 0 240 0 240 SetImageColor
			CurrentPixelCoords ->uy ->ux
			<-Y <-uy sub ->idy
			<-X <-ux sub ->idx
			Self "shadow" <-idx <-idy -5.9 SetImagePosition
			Self "shadow" 0 240 0 240 SetImageColor
		else
			Self "shadow" 240 0 0 240 SetImageColor
		endif
		#Finally, check to see if the user presses "Space" or "Escape" and deselect the unit if they do.
		"Space" GetKeyDown "Escape" GetKeyDown or if 0 ->selected endif
	endif

	<-moving if
		GetQueuedMoveCount eq0 if
			0 ->moving
			Self "DockerInterface.crpl" "Moving" "0" SetScriptVar
			<-Ghost 0 Destroy
		endif
	endif
endif
:ValidateMove

GetMousePosition ->Y ->X 
GetMouseCell ->CY ->CX
CurrentPixelCoords ->uy ->ux
<-Y <-uy sub ->idy
<-X <-ux sub ->idx
Self "shadow" <-idx <-idy -5.9 SetImagePosition
0 ->LastTerrain
0 ->failed
1 ->greenShadow
<-CY 2 add <-CY 1 sub do
	<-failed if
		break
	endif
	<-CX 2 add <-CX 1 sub do
		I J GetCellOccupiedCount neq0 if
			0 ->greenShadow
			1 ->failed
			break
		endif
		I J GetTerrain ->Terrain
		<-LastTerrain neq0 if
			<-Terrain <-LastTerrain neq if
				0 ->greenShadow
				1 ->failed
				break
			endif
		endif
		<-Terrain 0 gt if
			<-Terrain ->LastTerrain
		else
			0 ->greenShadow
			1 ->failed
			break
		endif
	loop
loop
:Shutdown #Generic function to restore tower to inactive state.
<-Entombed if
	@Detomb
endif
0 SetTimer1
0 SetTimer2
0 SetTimer3
0 ->Setup
0 ->Delay
0 ->AffectAll
0 ->Temp
0 ->MinValue
0 ->MaxValue
0 ->DiffValue
0 ->CurrValue
0 ->CurrentPhase
0 ->GoalTime
DisableTowerField
<-Victims GetListCount 0 do
	<-Victims I GetListElement ->Victim
	<-Victim "EmitterInterface.crpl" "EmitterType" GetScriptVar ->EmitterType
	<-Victim <-EmitterType ".crpl" concat "ACvar" 1 SetScriptVar
	<-Victim <-EmitterType ".crpl" concat "Cvar" 1 SetScriptVar
loop
CurrentCoords 0 0 GetAllUnitsInRange 0 do
	->unit
	<-unit GetUnitType "CRPLCORE" neq <-unit GetUnitType "GUPPYAIR" neq and if
		<-unit 0 destroy
	endif
loop
0 ->Energizees
0 ->Victims


:CreateUnits 
<-Power floor 0 do
	<-UnitType CurrentCoords CreateUnit ->GeneratedUnit
	<-GeneratedUnit CONST_ISBUILDING 0 SetUnitAttribute
	<-GeneratedUnit 0 SetUnitSelectableOverride
loop
:Variate
<-CurrentPhase 1 eq if
	<-CurrValue <-DiffValue <-GoalTime div 30 mul add  <-MaxValue min ->CurrValue
	
endif
<-CurrentPhase 2 eq if
	<-CurrValue <-DiffValue <-GoalTime div 30 mul sub  <-MinValue max ->CurrValue
	
endif

<-CurrValue <-MinValue eq if
	1 ->CurrentPhase
endif
<-CurrValue <-MaxValue eq if
	2 ->CurrentPhase
endif

<-Victims GetListCount 0 do
	<-Victims I GetListElement ->Victim
	<-Victim "EmitterInterface.crpl" "EmitterType" GetScriptVar ->EmitterType
	<-Mode 0 eq <-Mode 2 eq or if
		<-Victim <-EmitterType ".crpl" concat "ACvar" <-CurrValue SetScriptVar
	endif
	<-Mode 1 eq <-Mode 2 eq or if
		<-Victim <-EmitterType ".crpl" concat "Cvar" <-CurrValue SetScriptVar
	endif
loop
:Vacuum #Sucks in creeper.
<-Radius <-Power -1000000 mul dup 0 0 EnableTowerField
:Explode
5 CurrentCoords CellToPixel 1 0.15 <-Radius mul dup 0.02 <-Duration  CreateEffectClipped #EXPLODES
CurrentX <-Radius add 1 add CurrentX <-Radius sub do # J = X
	CurrentY <-Radius add 1 add CurrentY <-Radius sub do # I = Y
		CurrentCoords J I Distance <-Radius lte if
			J I <-CreepTotal neg 2000 min -2000 max AddCreeper
			<-ChipSpecial 1 eq if
				J I -1 SetTerrain
				J I -1 2001 <-voidmod mul add SetTerrainOverride
				J I 0 0 GetAllUnitsInRange 0 do ->Unit <-Unit Self neq if <-Unit 3 Destroy endif loop
			endif
		endif
	loop
loop
:CreateFirework 
"CRPLCORE" CurrentX CurrentY CreateUnit ->LaunchedFirework
<-LaunchedFirework "Firework.crpl" AddScriptToUnit
<-LaunchedFirework "Firework.crpl" "Radius" <-ChipSpecial SetScriptVar
<-LaunchedFirework "Firework.crpl" "Power" <-Power SetScriptVar
<-LaunchedFirework "Firework.crpl" "TargetX" CurrentX <-Radius neg <-Radius 1 add RandInt add SetScriptVar
<-LaunchedFirework "Firework.crpl" "TargetY" CurrentY <-Radius neg <-Radius 1 add RandInt add SetScriptVar
:Negate
	CurrentX <-Radius add 1 add CurrentX <-Radius sub do # J = X
		CurrentY <-Radius add 1 add CurrentY <-Radius sub do # I = Y
			CurrentCoords J I Distance <-Radius lte if
				J I GetCreeper ->Creeper
				<-Creeper 0 lt if
					<-ChipSpecial 1 gte if
						J I <-Creeper <-Power add 0 min SetCreeper
					endif
				else
					<-ChipSpecial 0 eq <-ChipSpecial 2 eq or if
							J I <-Creeper <-Power sub 0 max SetCreeper
					endif
				endif
			endif
		loop
	loop
	5 CurrentCoords CellToPixel 1 0.15 <-Radius mul dup 0.02 <-Duration  CreateEffectClipped #EXPLODES
:Energize

<-Energizees GetListCount 0 do
	<-Energizees I GetListElement ->TargetUnit
	<-TargetUnit CONST_ISBUILDING GetUnitAttribute 1 eq if

	else
		<-TargetUnit CONST_AMMO dup2 GetUnitAttribute <-Power add SetUnitAttribute
	endif
loop
:ACify

<-ACees GetListCount 0 do
	<-ACees I GetListElement ->TargetUnit
	<-TargetUnit CONST_AMMOAC dup2 GetUnitAttribute <-Power add SetUnitAttribute
loop
:Entomb
CurrentX <-Radius add CurrentX <-Radius sub 1 add do # J = X
	CurrentY <-Radius add CurrentY <-Radius sub 1 add do # I = Y
		J I GetTerrain	->CurrLevel
		<-CurrLevel 1 gte if
			<-CurrLevel  <-Power add 10 min ->TargetLevel
			J I <-TargetLevel  SetTerrain
			J I <-TargetLevel <-terrmod mul SetTerrainOverride
		endif
	loop
loop
1 ->Entombed
:Detomb
CurrentX <-Radius add CurrentX <-Radius sub 1 add do # J = X
	CurrentY <-Radius add CurrentY <-Radius sub 1 add do # I = Y
		J I GetTerrain	->CurrLevel
		<-CurrLevel 1 gte if
			J I GetTerrain <-Power sub 1 max ->TargetLevel
			J I <-TargetLevel  SetTerrain
			J I <-TargetLevel <-terrmod mul SetTerrainOverride
		endif
	loop
loop
0 ->Entombed
:SetImageAndText
    
	<-state <-STATE_INACTIVE eq if #base state
        "Insert a tower chip to activate" ->PopText
    endif
	<-Movable if
		Self "main" <-ImageMovable SetImage
		Self "main" 0 0 -4 SetImagePosition
	else
		Self "main" <-ImageImmovable SetImage
		Self "main" 0 0 -4 SetImagePosition
		Self "shadow" 0 0 0 0 SetImageColor
		Self "selector" 0 0 0 0 SetImageColor
	endif
    <-state <-STATE_ACTIVE eq if
		"" ->PopText

	  # <-ChipType <-! 0 eq if
		#	<-Creeped not if
		#		"Maintaining " <-Power floor " reactors" concat concat ->PopText 
		#	else
		#		"Remove creeper to resume operation" ->PopText 
		#	endif
		#endif
       #<-ChipType <-! 1 eq if
		#	"Eliminating " <-Power  
		#	<-ChipSpecial 0 eq if
		#		" creeper" concat concat 
		#	endif
		#	<-ChipSpecial 1 eq if
		#		" anticreeper" concat concat 
		#	endif
		#	<-ChipSpecial 2 eq if
		#		" creeper and anticreeper" concat concat 
		#	endif
		#	" every " <-Duration 30.0 div 0 round " seconds" concat concat concat ->PopText
		#endif
        #<-ChipType <-! 2 eq if
		#	"Shooting a firework every  " <-Duration 30.0 div 0 round " seconds" concat concat ->PopText 
		#endif
    endif
	<-Liberated not if
		"Requires decontamination before use" ->PopText
	endif
	GetTimer3 neq0 if #Timer display
		"Decontamination in progress, completion in " GetTimer3 30.0 div 0 Round " seconds" concat concat ->PopText
	endif
	<-PopText SetPopupText
:Awake
	ClearTraceLog
	HideTraceLog	
    Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
    Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
    Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
    Self CONST_CREATEPZ 0 SetUnitAttribute
    Self CONST_TAKEMAPSPACE 1 SetUnitAttribute
	Self CONST_CELLWIDTH 3 SetUnitAttribute
	Self CONST_CELLHEIGHT 3 SetUnitAttribute
	Self "main" 0 0 -4 SetImagePosition
	Self "shadow" "Custom33" SetImage
    Self "shadow" -5.9 SetImagePositionZ
	Self "selector" "Custom20" SetImage
    Self "selector" -7 SetImagePositionZ
    1 ->Size
    0 ->Materializer #setting up types
	1 ->Negator
	2 ->Firework
	3 ->Variator
	4 ->VoidBomb
	5 ->Energizer
	6 ->Entomber
	7 ->ACifier
	0 ->STATE_INACTIVE
    1 ->STATE_ACTIVE
    @SetImageAndText
    Self "main" Self CONST_CELLWIDTH GetUnitAttribute 3.0 div Self CONST_CELLHEIGHT GetUnitAttribute 3.0 div SetImageScale
    Self "DockerInterface.crpl" "HasDockerInterface" GetScriptVar eq0 if
		Self "DockerInterface.crpl" AddScriptToUnit
	endif
	Self "DockerInterface.crpl" "DockableType" <-Name SetScriptVar