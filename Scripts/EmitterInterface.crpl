#Technical script to ensure that all emitters can be interfaced with.

$HasEmitterInterface:1

$EmitterNetName:""
$EmitterType:""
$Mouseover:0

once
	@awake
	@ProcessImages
	Self "Arrow1" "NONE" SetImage
	Self "Arrow2" "NONE" SetImage
endonce


<-UpgradeEnabled if #The entire upgrading thing only fires if it's actually upgrade-enabled

	GetGameTimeFrames 240 mod eq0 if
		@ProcessImages
	endif

	<-EmitterType "EmitterACDeath" eq if #Blue emitters never emit AC and as such are never actually upgradeable
		0 ->UpgradeEnabled
	endif
	<-BombPresent if #if under the influence of a tune-up bomb no upgrading can take place.
			"Tune-up in progress" SetText
			220 220 50 255 SetTextColor 20 SetTextY 0.8 SetTextSize
			Self CONST_CANREQUESTAMMO 0 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY 0 SetUnitAttribute
			Self CONST_MAXAMMO 0 SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 0 SetUnitAttribute
			Self CONST_REQUESTPACKETS 0 SetUnitAttribute
			Self CONST_CONNECTABLE 0 SetUnitAttribute
			return
	endif
	<-EmitterType "FlipEmitter" eq <-EmitterType "ArmoredEmitter" eq or if #If an emitter is not friendly it does not get to upgrade.
		Self <-EmitterType ".crpl" concat "state" GetScriptVar if
			Self CONST_CANREQUESTAMMO 0 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY 0 SetUnitAttribute
			Self CONST_MAXAMMO 0 SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 0 SetUnitAttribute
			Self CONST_REQUESTPACKETS 0 SetUnitAttribute
			Self CONST_CONNECTABLE 0 SetUnitAttribute
			0 ->State
			0  SetTimer2
			0  SetTimer3
			0  SetTimer0
			90 SetTimer1
			return
		endif
	endif
	<-State 2 gte <-Valid and <-UpgradeLevel <-UpgradeLimit eq and <-UpgradeLimit neq0 and if
		0 ->Valid
		0 ->Shifty
		0 ->State
		1 ->Changed
		return
	endif
	GetTimer1 eq0 if #Timer for removing temporary texts
		"" SetText
	endif
	GetTimer2 neq0 if #Timer for showing a temporary text
		<-State 2 gte if
			"Commencing repeated upgrading" SetText
			50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		endif
		<-State 0 eq if
			"Upgrade cancelled" SetText
			220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		endif
		<-State 1 eq if
			"Initiating upgrade" SetText
			50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		endif
	endif
	GetTimer3 neq0 if #Timer for showing a temporary text -2 
		<-State 2 gte if
			"Upgrade complete, re-activating." SetText
			50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		endif
		<-State 0 eq if
			"Upgrade complete!" SetText
			50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		endif

	endif
	GetTimer0 neq0 if #Timer for showing a temporary text -3 
		<-UpgradeLevel <-UpgradeLimit eq <-UpgradeLimit neq0 and if
			"Upgrade limit reached" SetText
			220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		endif
		<-State 2 gte if
			"Max upgrade" SetText
			220 220 50 255 SetTextColor 15 SetTextY 0.6 SetTextSize
		endif
	endif
	Self <-EmitterType ".crpl" concat "EmissionBonus" <-UpgradeLevel <-EmissionEffect mul SetScriptVar #Sets emission bonus every frame.

	<-Valid <-Shifty and if #If we do shift+U set up continuous upgrage mode which is states 2 and 3. That is, you can enter that stante from both "off" and "on" states.
		0 ->Valid
		0 ->Shifty
		<-UpgradeLevel <-UpgradeLimit lt <-UpgradeLimit eq0 or if
			<-State 2 add ->State
			<-State 3 gt if
				0 ->State
				1 ->Changed
			endif
			<-State 3 eq if
				90 SetTimer2
				0  SetTimer3
			endif
			<-State 2 eq if
				1 ->Changed
			endif
		else
			0  SetTimer2
			0  SetTimer3
			90 SetTimer0	
		endif
	endif
	<-Valid <-Shifty not and if #If we do just U, set up an upgrade-once state.
		0 ->Valid
		0 ->Shifty
		<-UpgradeLevel <-UpgradeLimit lt <-UpgradeLimit eq0 or if
			<-State 1 add ->State
			<-State 1 gt if
				0 ->State
			endif
			1 ->Changed
		else
			0  SetTimer2
			0  SetTimer3
			90 SetTimer0		
		endif
	endif
	0 ->Valid
	0 ->Shifty
	<-State 1 eq <-Changed and if #if we are upgrading allow for ammo flow.
			Self CONST_CANREQUESTAMMO 1 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY <-RequestRate SetUnitAttribute
			Self CONST_MAXAMMO <-BaseValue <-AddValue <-UpgradeLevel mul add SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 1 SetUnitAttribute
			Self CONST_REQUESTPACKETS 1 SetUnitAttribute
			Self CONST_CONNECTABLE 1 SetUnitAttribute
			90 SetTimer2
			0  SetTimer3
			0  SetTimer0
			0 ->Changed
			@ProcessImages
	endif
	<-State 2 gte <-Changed and if #Same but for continuous upgrades
			Self CONST_CANREQUESTAMMO 1 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY <-RequestRate SetUnitAttribute
			Self CONST_MAXAMMO <-BaseValue <-AddValue <-UpgradeLevel mul add SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 1 SetUnitAttribute
			Self CONST_REQUESTPACKETS 1 SetUnitAttribute
			Self CONST_CONNECTABLE 1 SetUnitAttribute
			90 SetTimer2
			0  SetTimer3
			0  SetTimer0
			0 ->Changed
			@ProcessImages
	endif
	<-State 0 eq <-Changed and if #if we stopped upgrading, disable ammo flow
			Self CONST_CANREQUESTAMMO 0 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY 0 SetUnitAttribute
			Self CONST_MAXAMMO 0 SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 0 SetUnitAttribute
			Self CONST_REQUESTPACKETS 0 SetUnitAttribute
			Self CONST_CONNECTABLE 0 SetUnitAttribute
			0 ->Changed
			90 SetTimer2
			0  SetTimer3
			0  SetTimer0
			@ProcessImages
	endif
	<-State 1 eq Self CONST_AMMO GetUnitAttribute Self CONST_MAXAMMO GetUnitAttribute eq and if #if we were doing an upgrade once, and succesfully got all the ammo, upgrade then return to inactive state.
		<-UpgradeLevel 1 add ->UpgradeLevel
		0  SetTimer0
		0  SetTimer2
		90 SetTimer3	
		0 ->State
		Self CONST_CANREQUESTAMMO 0 SetUnitAttribute
		Self CONST_PACKETREQUESTDELAY 0 SetUnitAttribute
		Self CONST_MAXAMMO 0 SetUnitAttribute
		Self CONST_AMMO 0 SetUnitAttribute
		Self CONST_SHOWAMMOBAR 0 SetUnitAttribute
		Self CONST_REQUESTPACKETS 0 SetUnitAttribute
		Self CONST_CONNECTABLE 0 SetUnitAttribute
		@ProcessImages
	endif
	<-State 2 gte if
		<-UpgradeLevel <-UpgradeLimit eq <-UpgradeLimit neq0 and if
			<-StopMaxUpgrade if
				0 ->State
				1 ->Changed
				0 ->StopMaxUpgrade
			endif
			Self CONST_CANREQUESTAMMO 0 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY 0 SetUnitAttribute
			Self CONST_MAXAMMO 0 SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 0 SetUnitAttribute
			Self CONST_REQUESTPACKETS 0 SetUnitAttribute
			Self CONST_CONNECTABLE 0 SetUnitAttribute
			return
		else
			0 ->StopMaxUpgrade
			Self CONST_CANREQUESTAMMO 1 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY <-RequestRate SetUnitAttribute
			Self CONST_MAXAMMO <-BaseValue <-AddValue <-UpgradeLevel mul add SetUnitAttribute
			Self CONST_SHOWAMMOBAR 1 SetUnitAttribute
			Self CONST_REQUESTPACKETS 1 SetUnitAttribute
			Self CONST_CONNECTABLE 1 SetUnitAttribute
		endif
	endif
	<-State 2 gte Self CONST_AMMO GetUnitAttribute Self CONST_MAXAMMO GetUnitAttribute eq and if #if we were continuously upgrading, upgrade ourselves then resume. If we hit the upgrade cap, stop and wait for it to increase.
		<-UpgradeLevel <-UpgradeLimit lt <-UpgradeLimit eq0 or if
			<-UpgradeLevel 1 add ->UpgradeLevel
			0  SetTimer2
			90 SetTimer3
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY <-RequestRate SetUnitAttribute
			Self CONST_MAXAMMO <-BaseValue <-AddValue <-UpgradeLevel mul add SetUnitAttribute
			@ProcessImages
			<-UpgradeLevel <-UpgradeLimit eq if
				300 SetTimer0	
			endif
		endif
	endif
endif


:awake
	0 OperateWhilePaused
	<-State 1 gt <-BombPresent eq0 and if
			Self CONST_CANREQUESTAMMO 1 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY <-RequestRate SetUnitAttribute
			Self CONST_MAXAMMO <-BaseValue <-AddValue <-UpgradeLevel mul add SetUnitAttribute
			Self CONST_SHOWAMMOBAR 1 SetUnitAttribute
			Self CONST_REQUESTPACKETS 1 SetUnitAttribute
			Self CONST_CONNECTABLE 1 SetUnitAttribute
	else
			Self CONST_CANREQUESTAMMO 0 SetUnitAttribute
			Self CONST_PACKETREQUESTDELAY 0 SetUnitAttribute
			Self CONST_MAXAMMO 0 SetUnitAttribute
			Self CONST_AMMO 0 SetUnitAttribute
			Self CONST_SHOWAMMOBAR 0 SetUnitAttribute
			Self CONST_REQUESTPACKETS 0 SetUnitAttribute
			Self CONST_CONNECTABLE 0 SetUnitAttribute
	endif

:destroyed
	0 OperateWhilePaused
:ProcessImages
<-State 0 eq if
Self "Arrow1" "NONE" SetImage
Self "Arrow2" "NONE" SetImage
endif
<-State 1 eq if
Self "Arrow1" "Custom81" SetImage
Self "Arrow2" "NONE" SetImage
endif
<-State 2 gte if
Self "Arrow1" "NONE" SetImage
Self "Arrow2" "Custom82" SetImage
endif
Self "Arrow1" 0 0 -29 SetImagePosition
Self "Arrow2" 0 0 -29 SetImagePosition

<-SavedProgress <-UpgradeLevel eq <-SavedLimit <-UpgradeLimit eq and if #You really only need to set text if upgrade level changed.
	return
endif

<-TextShower eq0 <-TextShower CONST_ISDESTROYED GetUnitAttribute 1 eq or <-UpgradeLevel 1 gte and if
	"CRPLCORE" CurrentX CurrentY CreateUnit ->TextShower
	<-TextShower "EmText.crpl" AddScriptToUnit
	<-TextShower "EmText.crpl" "CreatedBy" Self SetScriptVar
endif
<-UpgradeLevel <-UpgradeLimit eq if #If we are at upgrage limit, color the text yellow, to signify max. Otherwise they are white.
	<-TextShower "EmText.crpl" "Max" 1 SetScriptVar
else
	<-TextShower "EmText.crpl" "Max" 0 SetScriptVar
endif
<-TextShower "EmText.crpl" "Text" <-UpgradeLevel "/" <-UpgradeLimit concat concat SetScriptVar
<-TextShower "EmText.crpl" "Changed" 1 SetScriptVar
<-UpgradeLevel ->SavedProgress 
<-UpgradeLimit ->SavedLimit 