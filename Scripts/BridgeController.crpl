# Allows you to manipulate bridges when cleansed
#Credit to GoodMorning for original PF scripts.

$Image:"Custom42"
$DecontaminationCooldown:10
$ControllerID:"01"
$StartState:0 #0 - off, 1 - on MUST be consistent across the same ContollerID
once
	ClearTraceLog
	HideTraceLog
	<-StartState ->State
	"" SetText
	220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
    @awake
	GetGameTimeFrames ->CaptureFrame
	0 ->PseudoTimer
	@CaptureRing
endonce
GetTimer1 eq0 if #Timer to remove temporary messages
	<-NetworkName SetText
endif
<-ArtificialChecks 2 gt <-Done eq0 and if
	@SeekNetwork
	1 ->Done
endif
<-ArtificialChecks <-Random gt if
	@CheckCaptured
	@SetBridgeText
	0 ->ArtificialChecks
	3 8 RandInt ->Random
endif
<-ArtificialChecks 1 add ->ArtificialChecks

Self "ControlInterface.crpl" "Mouseover" GetScriptVar ->Mouseover
<-Decontaminated 1 eq if
	Self "main" 255 127 128 <-State mul add 127 255 SetImageColor
endif
@NetworkMouseover -1 neq if
	Self "highlight" "Custom0pp" SetImage
	Self "highlight" 255 255 255 127 SetImageColor
else
	Self "highlight" "NONE" SetImage
endif
<-Mouseover if
	@AddNetworkPointers
else
	@RemoveNetworkPointers
endif



<-Liberated not if #Initiates reset if covered in AC and the reset it not started yet
	Self "main" 80 80 80 255 SetImageColor
	CurrentCoords GetCreeper -4 lte if
		GetGameTimeFrames ->CaptureFrame
		Self "main" 200 200 200 255 SetImageColor
		"Lifting lockdown" SetText
		50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		150 SetTimer1
		<-DecontaminationCooldown 30 mul ->PseudoTimer
		1 ->Liberated
		Self "main" 130 130 130 255 SetImageColor
	else
		return
	endif
endif
<-Decontaminated not GetTimer1 eq0 and if 
	220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
endif
<-Decontaminated if #De-Resets if covered back in creeper.
	50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
	CurrentCoords GetCreeper -4 gt if
		"Error: Creeper interference detected" SetText
		GetGameTimeFrames ->CaptureFrame
        220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		150 SetTimer1
		0 ->Liberated
		0 ->Decontaminated
		0 ->PseudoTimer
		@CaptureRing
		@SetBridgeText
		return
	endif
endif

IsPaused if return endif
<-PseudoTimer neq0 if #While resetting, checks for creep. If overwhelmed, resetting stops
	CurrentCoords GetCreeper -4 lte if
		@SetBridgeText
		@CaptureRing
		<-PseudoTimer 1 sub ->PseudoTimer
		return
	else
		"Error" SetText
		GetGameTimeFrames ->CaptureFrame
        220 50 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
		150 SetTimer1
		0 ->Liberated
		0 ->PseudoTimer
		@CaptureRing
		@SetBridgeText
		return
	endif
endif
<-PseudoTimer eq0 <-Liberated 1 eq <-Decontaminated 0 eq and and if #If successful, you are decontaminated
	"Lockdown lifted" SetText
    50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
	150 SetTimer1
	Self "main" 255 255 255 255 SetImageColor
	1 ->Decontaminated
	@SetBridgeText
	@CaptureRing
endif
#Check for click event
0 GetMouseButtonDown if
	#Check whether the click was in the UI area of the screen. We want to ignore those clicks.
	GetMouseScreenPixelPosition 96 gt if
		#Check whether the unit is selected yet.
		@CheckCaptured
		GetMouseCell CurrentCoords Distance 1.5 lt <-Unfinished 0 eq and if
			<-State 1 add ->State
			<-State 1 gt if
				0 ->State
			endif
			@SetBridgeText
			@SetBridgeState
		else
			@SetBridgeText
			return
		endif
	endif
endif


:awake
Self "main" <-Image SetImage
Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
Self CONST_CREATEPZ 0 SetUnitAttribute
1 OperateWhilePaused
-9999 ->LastClick
Self "ControlInterface.crpl" "HasControlInterface" GetScriptVar eq0 if
	Self "ControlInterface.crpl" AddScriptToUnit

endif
Self "ControlInterface.crpl" "NetName" <-ControllerID SetScriptVar
Self "ControlInterface.crpl" "IsController" 1 SetScriptVar
@CheckCaptured
@SetBridgeText
@SetBridgeState


:SetBridgeText
GetTimer3 neq0 if
	"System lockdown lifted in " GetTimer3 30.0 div 0 round " seconds" concat concat SetPopupText
	return
endif
<-State 0 eq if
	"Current setting: Off" ->PopText
endif
<-State 1 eq if
	"Current setting: On" ->PopText
endif
<-PopText "
	 Controls bridges numbered " <-ControllerID concat concat ->PopText

<-Decontaminated 0 eq  if
	 <-PopText "
	 Settings lockdown due to creeper contamination" concat ->PopText
endif
<-Unfinished 1 gte <-Decontaminated 1 eq and if
	<-PopText "
	You need to unlock " <-Unfinished " more controllers before you can operate this" concat concat concat ->PopText
endif
<-PopText SetPopupText


:SetBridgeState
-1 ->BridgeState
<-State 0 eq if
	0 ->BridgeState
endif
<-State 1 eq <-Unactivated 0 eq <-Unfinished 0 eq or and if
	1 ->BridgeState
endif

"ControllerID" <-ControllerID GetCoresWithVar
	0 do
		->PControllerID
		<-PControllerID "BridgeController.crpl" "State" <-State SetScriptVar
	loop
<-BridgeState 0 gte if
	"BridgeID" <-ControllerID GetCoresWithVar
		0 do
			->BridgeID
			<-BridgeID "BridgeCore.crpl" "State" <-BridgeState SetScriptVar
			<-BridgeID "BridgeCore.crpl" "Activated" 1 SetScriptVar
			<-BridgeID "MemoryBridgeCore.crpl" "State" <-BridgeState SetScriptVar
			<-BridgeID "MemoryBridgeCore.crpl" "Activated" 1 SetScriptVar
		loop
endif

:CheckCaptured
0 ->Unfinished
0 ->Unactivated
"ControllerID" <-ControllerID GetCoresWithVar
	0 do
		->PControllerID
		<-PControllerID "BridgeController.crpl" "Decontaminated" GetScriptVar 0 eq <-PControllerID Self neq and if
			<-Unfinished 1 add ->Unfinished
		endif
		<-PControllerID "BridgeController.crpl" "State" GetScriptVar 0 eq if
			<-Unactivated 1 add ->Unactivated
		endif
	loop




:SeekNetwork
	Self "ControlInterface.crpl" "NetName" GetScriptVar ->NetworkName
	
	<-NetworkName SetText

	CreateList ->Minions
	CreateList ->CoCommanders
	
	"NetName" <-NetworkName GetCoresWithVar 0 do
		->UID
		
		<-UID "ControlInterface.crpl" "IsController" GetScriptVar 1 eq if
			<-UID Self neq if
				<-CoCommanders <-UID AppendToList
			endif
		else
			<-Minions <-UID AppendToList
		endif
	loop

:RemoveNetworkPointers
	<-CoCommanders GetListCount 0 do
		Self <-CoCommanders I GetListElement "_pointer" concat "NONE" SetImage
	loop
	
	<-Minions GetListCount 0 do
		Self <-Minions I GetListElement "_pointer" concat "NONE" SetImage
	loop

:AddNetworkPointers
	<-CoCommanders GetListCount 0 do
		<-CoCommanders I GetListElement 191 191 0 255 @AddPointerToUnit
	loop
	
	<-Minions GetListCount 0 do
		<-Minions I GetListElement 191 0 191 255 @AddPointerToUnit
	loop
	
:AddPointerToUnit # [ UID R G B A - ]
	->APTU_A ->APTU_B ->APTU_G ->APTU_R ->APTU_UID
	
	<-APTU_UID Self eq if return endif
	
	<-APTU_UID CONST_PIXELCOORDX GetUnitAttribute <-APTU_UID CONST_PIXELCOORDY GetUnitAttribute CurrentPixelCoords Distance ->APTU_PixelDist
	
	<-APTU_UID CONST_PIXELCOORDX GetUnitAttribute CurrentPixelCoords <-APTU_UID CONST_PIXELCOORDY GetUnitAttribute swap sub ->APTU_DPY sub ->APTU_DPX
	
	<-APTU_UID "_pointer" concat ->APTU_Slot
	
	Self <-APTU_Slot "Custom0pp" SetImage
	Self <-APTU_Slot <-APTU_DPX 2 div <-APTU_DPY 2 div 0 SetImagePosition
	Self <-APTU_Slot <-APTU_PixelDist 24 div 0.05 SetImageScale
	
	Self <-APTU_Slot <-APTU_DPY <-APTU_DPX atan2 SetImageRotation
	
	Self <-APTU_Slot <-APTU_R <-APTU_G <-APTU_B <-APTU_A SetImageColor

:NetworkMouseover # [ - UID ] Return the unit in the network with the mouse over it, or none.
	<-Mouseover if Self return endif
	
	<-CoCommanders GetListCount 0 do
		<-CoCommanders I GetListElement "ControlInterface.crpl" "Mouseover" GetScriptVar if
			<-CoCommanders I GetListElement 
			return 
		endif
	loop
	
	<-Minions GetListCount 0 do
		<-Minions I GetListElement "ControlInterface.crpl" "Mouseover" GetScriptVar if 
			<-Minions I GetListElement 
			return 
		endif
	loop
	
	-1


:CaptureRing # [ Captured - ]
	
	<-DecontaminationCooldown 2 mul ->StrutCount
	PI 2 mul <-StrutCount div ->StrutAngleChange
	
	<-PseudoTimer 0 eq if
		<-CaptureFrame <-DecontaminationCooldown 30 mul add GetGameTimeFrames sub ->CapturedFrames
	else
		<-PseudoTimer ->CapturedFrames
	endif
	12 ->PixelRange
	<-StrutAngleChange 2 div sin <-PixelRange mul ->StrutLength
	<-StrutAngleChange 2 div cos <-PixelRange mul ->StrutDist
	
	<-StrutCount 0 do
		"Link_" I concat ->StrutName
		<-StrutAngleChange I mul ->StrutAngle
		Self <-StrutName "Custom33" SetImage
		<-CapturedFrames 15 div 1 sub I lt if
			Self <-StrutName 63 63 255 255 SetImageColor
		else
			Self <-StrutName 255 63 63 255 SetImageColor
		endif
		Self <-StrutName <-StrutAngle SetImageRotation
		Self <-StrutName <-StrutAngle cos <-StrutDist mul <-StrutAngle sin <-StrutDist mul -2 SetImagePosition
		Self <-StrutName 0.125 SetImageScaleX
		Self <-StrutName <-StrutLength 5.93 div SetImageScaleY
	loop



:destroyed
	0 OperateWhilePaused
