#FreeTower. Insert Chips to have effects. Depends 100% on chips to have an effect.
$ImageNormal:"Custom18_128"
$ImageLine:"Custom3pp"
once
	"Name" "walldigger" GetCoresWithVar if #Acquires variables from walldigger to ensure coherent terrain alterations.
		->Walldigger
		ClearStack
	endif
	<-Walldigger "walldigger.crpl" "Voidaffects" GetScriptVar ->voidmod
	<-Walldigger "walldigger.crpl" "Multi" GetScriptVar ->terrmod
	<-Walldigger "walldigger.crpl" "Freeze" GetScriptVar ->freezeterr
	@Shutdown
	1 ->Size
	#Sets states for later use
	"Name" "walldigger" GetCoresWithVar if
		->Walldigger
		ClearStack
	endif
	<-Walldigger "walldigger.crpl" "Voidaffects" GetScriptVar ->voidmod
	"Tower" ->Name
    <-STATE_INACTIVE ->state #Starts inactive
	HideTraceLog
	ClearTraceLog
	@Awake
   
	-1 ->InsertedChip #Assumes this is empty. If the Tower starts with a chip on top, the 1 delay on the chip will set this after the initialization
endonce
GetTimer0 eq0 if #Timer for removing temporary texts
    "" SetText
endif

<-state <-STATE_INACTIVE eq if #base state
    <-InsertedChip 0 lt if
		@SetImageAndText
	else
		<-STATE_ACTIVE ->state
		"Activating" SetText
        50 220 50 255 SetTextColor 20 SetTextY 1.0 SetTextSize
        150 SetTimer0
	endif
endif
<-state <-STATE_ACTIVE eq if #when set with a chip.
    <-InsertedChip 0 gte if
		@SetImageAndText
	else
		<-STATE_INACTIVE ->state
		"SHUTTING DOWN" SetText
        220 50 50 255 SetTextColor 20 SetTextY 1.0 SetTextSize
        150 SetTimer0
		@Shutdown
		return
	endif
    <-ChipType <-! 0 eq if #Power chip. Creates a stack of reactors under itself and maintains them in case of creeper. Destroys them if deactivated. If special, ALSO drops a PZ
		CurrentCoords GetCreeper 0 lte if
			<-Setup not if
				<-ChipSpecial 1 eq if
					"POWERZONE" CurrentCoords CreateUnit pop
				endif
				@CreateReactors
				1 ->Setup
				180 SetTimer1
				return
			endif
			0 ->Creeped
			GetTimer1 eq0 if
				1 ->Okay
				CurrentCoords 0 0 GetAllUnitsInRange 0 do
					->unit
					<-unit GetUnitType "REACTOR" eq if
						0 ->Okay
						ClearStack
						break
					endif
				loop
				<-Okay if
					@CreateReactors
				endif
			endif
		else
			1 ->Creeped
			0 ->Setup
		endif
	endif
    <-ChipType <-! 1 eq if #Negator chip. Destroys creeper in a radius every once in a while
		<-Setup not if
			<-Duration SetTimer1
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@Negate
			<-Duration SetTimer1
		endif
	endif
    <-ChipType <-! 2 eq if #Firework chip. Randomly shoots fireworks around itself.
		<-Setup not if
			<-Duration SetTimer1
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@CreateFirework
			<-Duration SetTimer1
		endif
    endif

    <-ChipType <-! 3 eq if #Connector chip. Makes a relay and a PZ under itself, maintains the relay in case of creeper, destroys both on deactivation. If Special, drops a collector instead.
		CurrentCoords GetCreeper 0 lte if
			<-Setup not if
				@CreateConnection
				1 ->Setup
				180 SetTimer1
				return
			endif
			0 ->Creeped
			GetTimer1 eq0 if
				1 ->Okay
				CurrentCoords 0 0 GetAllUnitsInRange 0 do
					->unit
					<-unit GetUnitType "RELAY" eq <-unit GetUnitType "COLLECTOR" eq or if
						0 ->Okay
						ClearStack
						break
					endif
				loop
				<-Okay if
					<-ChipSpecial eq0 if
						"RELAY" CurrentCoords CreateUnit pop
					else
						"COLLECTOR" CurrentCoords CreateUnit pop
					endif
				endif
			endif
		else
			1 ->Creeped
			0 ->Setup
		endif
	endif
	<-ChipType <-! 4 eq if #VoidBomb. Sucks in creeper then explodes. If special, REALLY explodes.
		<-Setup not if
			<-InsertedChip "TowerChip.crpl" "disabled" 1 SetScriptVar
			@Vacuum
			<-Duration SetTimer1
			1 ->Setup
		endif
		GetTimer1 neq0 if
			<-CreepTotal CurrentCoords GetCreeper max ->CreepTotal
			CurrentCoords CurrentCoords GetCreeper <-CreepTotal sub SetCreeper
		endif
		GetTimer1 eq0 if
			@Explode
			<-InsertedChip 0 Destroy
			Self 3 Destroy
		endif
	endif
	<-ChipType <-! 5 eq if #Energizer. Provides energy to nearby stuff
		<-Setup not if
			<-ChipSpecial "," Split ->Temp
			<-Temp 0 GetListElement ->AffectAll
			<-Temp 1 GetListElement ->Delay
			CreateList ->Energizees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-AffectAll not if
					<-unit "EmitterInterface.crpl" "UpgradeEnabled" GetScriptVar 1 eq if
						<-Energizees <-unit  AppendToList
					endif
				else
					<-Energizees <-unit  AppendToList
				endif
			loop
			<-Duration SetTimer1
			<-Delay SetTimer2
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@Energize
			<-Duration SetTimer1
		endif
		GetTimer2 eq0 if
			CreateList ->Energizees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-AffectAll not if
					<-unit "EmitterInterface.crpl" "UpgradeEnabled" GetScriptVar 1 eq if
						<-Energizees <-unit  AppendToList
					endif
				else
					<-Energizees <-unit  AppendToList
				endif
			loop
			<-Delay SetTimer2
		endif
	endif
    <-ChipType <-! 6 eq if #Entomber chip. Alters surrounding terrain.
		<-Setup not if
			@Entomb
			1 ->Setup
		endif
    endif
	<-ChipType <-! 7 eq if #ACifier. Provides AC to nearby stuff
		<-Setup not if
			<-ChipSpecial ->Delay
			CreateList ->ACees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-ACees <-unit  AppendToList
			loop
			<-Duration SetTimer1
			<-Delay SetTimer2
			1 ->Setup
		endif
		GetTimer1 eq0 if
			@ACify
			<-Duration SetTimer1
		endif
		GetTimer2 eq0 if
			CreateList ->ACees
			CurrentCoords <-Radius 0 GetAllUnitsInRange 0 do
				->unit
				<-ACees <-unit  AppendToList
			loop
			<-Delay SetTimer2
		endif
	endif
	<-InsertedChip "TowerChip.crpl" "TimeSpent" <-InsertedChip "TowerChip.crpl" "TimeSpent"  GetScriptVar 1 add SetScriptVar
endif


:Shutdown #Generic function to restore tower to inactive state.
<-Entombed if
	@Detomb
endif
0 SetTimer1
0 SetTimer2
0 SetTimer3
0 ->Setup
0 ->Delay
0 ->AffectAll
0 ->Temp
DisableTowerField
CurrentCoords 0 0 GetAllUnitsInRange 0 do
	->unit
	<-unit GetUnitType "REACTOR" eq <-unit GetUnitType "POWERZONE" eq <-unit GetUnitType "RELAY" eq <-unit GetUnitType "COLLECTOR" eq or or or if
		<-unit 0 destroy
	endif
0 ->Energizees
loop

:CreateReactors 
<-Power floor 0 do
	"REACTOR" CurrentCoords CreateUnit ->Reactor
	<-Reactor CONST_ISBUILDING 0 SetUnitAttribute
loop
:CreateConnection
<-ChipSpecial eq0 if
	"RELAY" CurrentCoords CreateUnit ->Connection
else
	"COLLECTOR" CurrentCoords CreateUnit ->Connection
endif
"POWERZONE" CurrentCoords CreateUnit pop
<-Connection CONST_ISBUILDING 0 SetUnitAttribute

:Vacuum #Sucks in creeper.
<-Radius <-Power -1000000 mul dup 0 0 EnableTowerField
:Explode
5 CurrentCoords CellToPixel 1 0.15 <-Radius mul dup 0.02 <-Duration  CreateEffectClipped #EXPLODES
CurrentX <-Radius add 1 add CurrentX <-Radius sub do # J = X
	CurrentY <-Radius add 1 add CurrentY <-Radius sub do # I = Y
		CurrentCoords J I Distance <-Radius lte if
			J I <-CreepTotal neg 2000 min -2000 max AddCreeper
			<-ChipSpecial 1 eq if
				J I -1 SetTerrain
				J I -1 2001 <-voidmod mul add SetTerrainOverride
				J I 0 0 GetAllUnitsInRange 0 do ->Unit <-Unit Self neq if <-Unit 3 Destroy endif loop
			endif
		endif
	loop
loop
:CreateFirework 
"CRPLCORE" CurrentX CurrentY CreateUnit ->LaunchedFirework
<-LaunchedFirework "Firework.crpl" AddScriptToUnit
<-LaunchedFirework "Firework.crpl" "Radius" <-ChipSpecial SetScriptVar
<-LaunchedFirework "Firework.crpl" "Power" <-Power SetScriptVar
<-LaunchedFirework "Firework.crpl" "TargetX" CurrentX <-Radius neg <-Radius 1 add RandInt add SetScriptVar
<-LaunchedFirework "Firework.crpl" "TargetY" CurrentY <-Radius neg <-Radius 1 add RandInt add SetScriptVar
:Negate
	CurrentX <-Radius add 1 add CurrentX <-Radius sub do # J = X
		CurrentY <-Radius add 1 add CurrentY <-Radius sub do # I = Y
			CurrentCoords J I Distance <-Radius lte if
				J I GetCreeper ->Creeper
				<-Creeper 0 lt if
					<-ChipSpecial 1 gte if
						J I <-Creeper <-Power add 0 min SetCreeper
					endif
				else
					<-ChipSpecial 0 eq <-ChipSpecial 2 eq or if
							J I <-Creeper <-Power sub 0 max SetCreeper
					endif
				endif
			endif
		loop
	loop
	5 CurrentCoords CellToPixel 1 0.15 <-Radius mul dup 0.02 <-Duration  CreateEffectClipped #EXPLODES
:Energize

<-Energizees GetListCount 0 do
	<-Energizees I GetListElement ->TargetUnit
	<-TargetUnit CONST_ISBUILDING GetUnitAttribute 1 eq if

	else
		<-TargetUnit CONST_AMMO dup2 GetUnitAttribute <-Power add SetUnitAttribute
	endif
loop
:ACify

<-ACees GetListCount 0 do
	<-ACees I GetListElement ->TargetUnit
	<-TargetUnit CONST_AMMOAC dup2 GetUnitAttribute <-Power add SetUnitAttribute
loop
:Entomb
CurrentX <-Radius add CurrentX <-Radius sub 1 add do # J = X
	CurrentY <-Radius add CurrentY <-Radius sub 1 add do # I = Y
		J I GetTerrain	->CurrLevel
		<-CurrLevel 1 gte if
			<-CurrLevel  <-Power add 10 min ->TargetLevel
			J I <-TargetLevel  SetTerrain
			J I <-TargetLevel <-terrmod mul SetTerrainOverride
		endif
	loop
loop
1 ->Entombed
:Detomb
CurrentX <-Radius add CurrentX <-Radius sub 1 add do # J = X
	CurrentY <-Radius add CurrentY <-Radius sub 1 add do # I = Y
		J I GetTerrain	->CurrLevel
		<-CurrLevel 1 gte if
			J I GetTerrain <-Power sub 1 max ->TargetLevel
			J I <-TargetLevel  SetTerrain
			J I <-TargetLevel <-terrmod mul SetTerrainOverride
		endif
	loop
loop
0 ->Entombed
:SetImageAndText
    
	<-state <-STATE_INACTIVE eq if #base state
        "Insert a tower chip to activate" ->PopText
    endif
    <-state <-STATE_ACTIVE eq if
      "" ->PopText
	  # <-ChipType <-! 0 eq if
		#	<-Creeped not if
		#		"Maintaining " <-Power floor " reactors" concat concat ->PopText 
		#	else
		#		"Remove creeper to resume operation" ->PopText 
		#	endif
		#endif
       #<-ChipType <-! 1 eq if
		#	"Eliminating " <-Power  
		#	<-ChipSpecial 0 eq if
		#		" creeper" concat concat 
		#	endif
		#	<-ChipSpecial 1 eq if
		#		" anticreeper" concat concat 
		#	endif
		#	<-ChipSpecial 2 eq if
		#		" creeper and anticreeper" concat concat 
		#	endif
		#	" every " <-Duration 30.0 div 0 round " seconds" concat concat concat ->PopText
		#endif
        #<-ChipType <-! 2 eq if
		#	"Shooting a firework every  " <-Duration 30.0 div 0 round " seconds" concat concat ->PopText 
		#endif
    endif
	
	<-PopText SetPopupText
:Awake
    Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
    Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
    Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
    Self CONST_CREATEPZ 0 SetUnitAttribute
    Self CONST_TAKEMAPSPACE 1 SetUnitAttribute
	Self CONST_CELLWIDTH 3 SetUnitAttribute
	Self CONST_CELLHEIGHT 3 SetUnitAttribute
	Self "main" <-ImageNormal SetImage
	Self "main" 0 0 -4 SetImagePosition
	1 ->Size
    0 ->Generator #setting up types
	1 ->Negator
	2 ->Firework
	3 ->Connector
	4 ->VoidBomb
	5 ->Energizer
	6 ->Entomber
	7 ->ACifier
	0 ->STATE_INACTIVE
    1 ->STATE_ACTIVE
    @SetImageAndText
    Self "main" Self CONST_CELLWIDTH GetUnitAttribute 3.0 div Self CONST_CELLHEIGHT GetUnitAttribute 3.0 div SetImageScale
    