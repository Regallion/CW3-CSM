#FlipBridgeCore: same as normal BridgeCore, but for flip bridge controllers.
#Credit to GoodMorning for original PF scripts.

$Size:3
$Height:1
$StartState:0
$BridgeID:"01" #For use with BridgeController script
$Mode:"Kill" #Possible values: "Kill" "Freeze"
once
	"Name" "walldigger" GetCoresWithVar if #Acquires variables from walldigger to ensure coherent terrain alterations.
		->Walldigger
		ClearStack
	endif
	<-Walldigger "walldigger.crpl" "Voidaffects" GetScriptVar ->voidmod
	<-Walldigger "walldigger.crpl" "Multi" GetScriptVar ->terrmod
	<-Walldigger "walldigger.crpl" "Freeze" GetScriptVar ->freezeterr
	3 8 RandInt ->Random
    @awake
	<-StartState ->State 
	<-BridgeID SetText
	Self CONST_CELLHEIGHT <-Size 1.7 mul floor SetUnitAttribute
	Self CONST_CELLWIDTH <-Size 1.7 mul floor SetUnitAttribute
endonce
<-Activated 1 eq <-State 1 eq and if #if activated and State is active adds some terrain under itself. Does so once per activation. Terrain is coherent with walldigger multiplier. If bridge is freeze-type also removes the fields.
	Self "main" "Custom11_128" SetImage
	CurrentX <-Size add CurrentX <-Size sub 1 add do # J = X
		CurrentY <-Size add CurrentY <-Size sub 1 add do # I = Y
			J I <-Height SetTerrain
			<-freezeterr not if
				J I <-Height <-terrmod mul SetTerrainOverride
			else
				J I -1 SetTerrainOverride
			endif
			<-Mode "Freeze" eq if
				J I 0 0  SetPinFieldCell
			endif
		loop
	loop
	0 ->Activated
endif

<-Activated 1 eq <-State 0 eq and if #if activated and State is not active removes some terrain under itself. Does so once per activation. Void is coherent with walldigger multiplier. If bridge is freeze-type also sets the pins. if bridge is kill-type also destroys all creeper on itself.
	Self "main" "Custom10_128" SetImage
	CurrentX <-Size add CurrentX <-Size sub 1 add do # J = X
		CurrentY <-Size add CurrentY <-Size sub 1 add do # I = Y
			<-freezeterr not if
				J I -1 2001 <-voidmod mul add SetTerrainOverride
			else
				J I -1 SetTerrainOverride
			endif
			J I -1 SetTerrain
			<-Mode "Freeze" eq if
				J I 1 1  	SetPinFieldCell
			else
				J I 0 SetCreeper
			endif
		loop
	loop
	0 ->Activated
endif



<-ArtificialChecks <-Random gt <-Done eq0 and if #Seeks network once.
	@SeekNetwork
	1 ->Done
endif
<-ArtificialChecks 1 add ->ArtificialChecks

Self "ControlInterface.crpl" "Mouseover" GetScriptVar ->Mouseover


@NetworkMouseover -1 neq if #Shows network pointers on mouseover.
	Self "highlight" "Custom0pp" SetImage
	Self "highlight" <-Size 1.7 div dup SetImageScale
	Self "highlight" 255 255 255 127 SetImageColor
else
	Self "highlight" "NONE" SetImage
	Self "highlight" 255 255 255 0 SetImageColor
endif

<-Mouseover if
	@AddNetworkPointers
else
	@RemoveNetworkPointers
endif




:awake #On woke activates the bridge to ensure coherent terrain and field status.
ClearTraceLog
HideTraceLog
Self "main" "Custom10_128" SetImage
Self "main" <-Size 1.7 mul dup SetImageScale
<-Mode "-type" concat SetPopupText
Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
Self CONST_CREATEPZ 0 SetUnitAttribute
1 ->Activated
Self "ControlInterface.crpl" "HasControlInterface" GetScriptVar eq0 if
	Self "ControlInterface.crpl" AddScriptToUnit

endif
Self "ControlInterface.crpl" "NetName" <-BridgeID SetScriptVar
Self "ControlInterface.crpl" "IsController" 0 SetScriptVar
	
	1 OperateWhilePaused


:SeekNetwork
	Self "ControlInterface.crpl" "NetName" GetScriptVar ->NetworkName
	
	<-NetworkName SetText
	
	CreateList ->Companions
	CreateList ->Controllers

	"OffControllerID" <-BridgeID GetCoresWithVar 0 do
		->UID
		<-UID "ControlInterface.crpl" "IsController" GetScriptVar 1 eq <-UID "FlipBridgeController.crpl" "Image" GetScriptVar StringLength neq0 and if
				<-Controllers <-UID AppendToList
		endif
	loop
	"OnControllerID" <-BridgeID GetCoresWithVar 0 do
		->UID
		<-UID "ControlInterface.crpl" "IsController" GetScriptVar 1 eq <-UID "FlipBridgeController.crpl" "Image" GetScriptVar StringLength neq0 and if
				<-Controllers <-UID AppendToList
		endif
	loop
	"NetName" <-NetworkName GetCoresWithVar 0 do
		->UID
		<-UID "ControlInterface.crpl" "IsController" GetScriptVar 0 eq <-UID "FlipBridgeCore.crpl" "Mode" GetScriptVar StringLength neq0 and if
			<-Companions <-UID AppendToList
		endif
	loop

:RemoveNetworkPointers
	<-Controllers GetListCount 0 do
		Self <-Controllers I GetListElement "_pointer" concat "NONE" SetImage
	loop
	
	<-Companions GetListCount 0 do
		Self <-Companions I GetListElement "_pointer" concat "NONE" SetImage
	loop

:AddNetworkPointers

	<-Controllers GetListCount 0 do
		<-Controllers I GetListElement 191 191 0 255 @AddPointerToUnit
	loop
	
	<-Companions GetListCount 0 do
		<-Companions I GetListElement 191 0 191 255 @AddPointerToUnit
	loop
	
:AddPointerToUnit # [ UID R G B A - ]
	->APTU_A ->APTU_B ->APTU_G ->APTU_R ->APTU_UID
	
	<-APTU_UID Self eq if return endif
	
	<-APTU_UID CONST_PIXELCOORDX GetUnitAttribute <-APTU_UID CONST_PIXELCOORDY GetUnitAttribute CurrentPixelCoords Distance ->APTU_PixelDist
	
	<-APTU_UID CONST_PIXELCOORDX GetUnitAttribute CurrentPixelCoords <-APTU_UID CONST_PIXELCOORDY GetUnitAttribute swap sub ->APTU_DPY sub ->APTU_DPX
	
	<-APTU_UID "_pointer" concat ->APTU_Slot
	
	Self <-APTU_Slot "Custom0pp" SetImage
	Self <-APTU_Slot <-APTU_DPX 2 div <-APTU_DPY 2 div 0 SetImagePosition
	Self <-APTU_Slot <-APTU_PixelDist 24 div 0.05 SetImageScale
	
	Self <-APTU_Slot <-APTU_DPY <-APTU_DPX atan2 SetImageRotation
	
	Self <-APTU_Slot <-APTU_R <-APTU_G <-APTU_B <-APTU_A SetImageColor

:NetworkMouseover # [ - UID ] Return the unit in the network with the mouse over it, or none.
	<-Mouseover if Self return endif
	
	<-Controllers GetListCount 0 do
		<-Controllers I GetListElement "ControlInterface.crpl" "Mouseover" GetScriptVar if <-CoCommanders I GetListElement return endif
	loop
	
	<-Companions GetListCount 0 do
		<-Companions I GetListElement "ControlInterface.crpl" "Mouseover" GetScriptVar if <-Companions I GetListElement return endif
	loop
	
	-1

	
:destroyed #if somehow destroyed, removes the fields.
	0 OperateWhilePaused
	CurrentX <-Size add CurrentX <-Size sub 1 add do # J = X
		CurrentY <-Size add CurrentY <-Size sub 1 add do # I = Y
				J I 0 0  	SetPinFieldCell
		loop
	loop 