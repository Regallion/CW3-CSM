#Advanced bomps: bigger, badder, more flexible. Preferred by dodongos. Required scripts: ChipFactory and FactoryChip
#RangeIndicator for bombs by Kajacx
$CreatedBy:-1
#All below parameters are passed to this by ChipFactory. Left here for reference to their effects.
#$MovementSpeed:1.0 #How fast the BOMP will move
#$Radius:10 # defines the radius of the effect of the bomb. For Firework bombs, determines how far the fireworks can spread. Does nothing for omega bombs or frenzy/weaken/Tuneup bomps
#$Power:5.0 # Defines the effect of certain bombs. Frenzy/weaken bombs multiply/divide production by power, Singularity bombs pull harder. Fireworks deal that much damage to creeper, Tuneup adds that many levels Negative effect for Defusers, as it amplifies their death throes effect. Does not affect other bomb types.
#$Duration:10 # duration of bomp effect in seconds. For fireworks, defines how long it takes to launch a firework. Does nothing for conversion bomps, or omega bombs. For defusers and Tuneups longer durations are negative, as it essentially delays their effect. For flip bombs defines the interval between extra flips
#$BombType:"Conversion" # valid values are "Conversion", "Freeze", "Singularity", "Defuser","Frenzy", "Omega", "OmegaORA", "Flip", "Weaken", "Stopper", "Firework", "Tuneup" Omega and stopper bombs are not affected by any parameters other tham move speed
#$BombSpecial:"" #Freeform field for setting special traits for bombs. For Fireworks, takes 2 comma-separated numbers, the first is how many fireworks per second it launches, the second is how big the firework explosion is. For flip bombs. 0 or empty - Flips once. 1 - flips once but can target towers, 2 and above: does that many flips, but cannot target towers. For conversion bombs : 0, normal, positive amount marks the range of second explosion. For stoppers: 0 does nothing, 1 causes the effect to be permanent.
#$BombLifeTime:0 #If not 0, the bomb will explode after this many seconds once it starts moving.
$Image:"Custom40"
$ImageCircle:"Custom4_256"

once
	0 ->Primed #denotes whether the bomp wants to explode
	0 ->Active #Denotes whether the bomp applied it's effects

    <-CreatedBy -1 eq if
        Self 0 Destroy #destroy on recompile
        return
    endif

	@Awake
	
	##Initialize state variables##
	0 ->moving
	0 ->selected
	0 ->greenShadow
	0.0 ->selectorRotation
endonce

<-Primed 1 eq if #If a bomb is primed, it means it is getting ready to explode. Primed bombs cannot be moved. This state is normally entered by moving to a target.
	<-BombType <-! 0 eq if #Conversion bomb. Activates immediately, converting in a radius. If fed with BombSpecial explodes twice.
		<-Active eq0 if
			<-Radius @convert
			1 ->Active
			Self "selector" 0 0 0 0 SetImageColor
			Self "shadow" 0 0 0 0 SetImageColor
			Self "range1" 0 0 0 0 SetImageColor
			Self "range2" <-C_R <-C_G <-C_B 255 SetImageColor
			Self "range2" 0 0 -51 SetImagePosition
		endif
		<-BombSpecial eq0 if
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
		"Second explosion in " GetTimer0 30 div ", watch out!" concat concat SetText
		GetTimer0 eq0 if
			<-BombSpecial @deconvert
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 1 eq if #Freeze bomp. Freezes stuff in the radius for the duration.
		<-Active eq0 if
		<-Radius @freeze
			1 ->Active
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			<-Radius @unfreeze
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 2 eq if #Singularity bomp. Pushes creeper in depending on Power and Radius
		<-Active eq0 if
			<-Radius <-Power -1000000 mul dup 0 0 EnableTowerField #no point in making that a function since it's already a damn function
			1 ->Active
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			DisableTowerField
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 3 eq if #Defuser. Removes Creeper emitters without triggering their payload. However, sharply increases their power when active. Power+1 is the multiplier.
		<-Active eq0 if
			<-Power 0.5 <-MovingUnit @frenzy #doubles the speed, and multiplies power of emitter
			1 ->Active
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			<-MovingUnit "BlockerDocker.crpl" "IsBlockerDocker" GetScriptVar 1 eq if #allows you to dispose of excess defusers by blowing them on blockers
				<-MovingUnit "BlockerDocker.crpl" "occupied" 0 SetScriptVar
				<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
				Self 0 Destroy
			else
				<-MovingUnit 3 Destroy
				<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
				Self 0 Destroy
			endif
		endif
	endif
	<-BombType <-! 4 eq if #Frenzy, causes emitters to provide excess output for the duration. Power is the multiplier.
		<-Active eq0 if
			<-Power 1 <-MovingUnit @frenzy 
			1 ->Active
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			<-Power 1 <-MovingUnit @unfrenzy 
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType "Omega" eq if #OmegaBomp. Combines Freeze Singularity Frenzy and Conversion to create an ultimate creepsplosion. Is not affected by normal parameters, because well, why would it ever need to?
		<-Active eq0 if #sets up the empowering
			900	SetTimer1
			10 1 <-MovingUnit @frenzy 
			1 ->Active
		endif
		GetTimer1 30.0 div 0 round SetText
		GetTimer1 800 eq if #enables singularity
			40 40 -1000000 mul dup 0 0 EnableTowerField
		endif
		GetTimer1 500 eq if #disables singularity shortly after pinning in place
			DisableTowerField
		endif
		GetTimer1 600 eq if #Freezes everything
			50 @freeze
		endif
		GetTimer1 100 eq if #Cleans freeze right before explosion
			50 @unfreeze
		endif
		GetTimer1 eq0 if #Massconverts
			50 @convert
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			10 1 <-MovingUnit @unfrenzy 
			Self 0 Destroy
		endif
	endif
	<-BombType "OmegaORA" eq if #OmegaBomp. Exactly the same as Omega except with EXTRA SHOUTING and ROADROLLA
		<-Active eq0 if #sets up the empowering
			900	SetTimer1
			10 1 <-MovingUnit @frenzy 
			1 ->Active
			"MUDA DA" SetText
			"MUDA" ->MUDA
			220 10 10 255 SetTextColor 20 SetTextY 1.2 SetTextSize
		endif
		GetTimer1 800 eq  if #enables singularity
			40 40 -1000000 mul dup 0 0 EnableTowerField
			""	SetText
		endif
		GetTimer1 800 lt GetTimer1 600 gt and if #MUDA
			GetTimer1 15 mod eq0 if
				<-MUDA "MUDA" concat ->MUDA
				<-MUDA SetText
			endif
		endif
		GetTimer1 500 eq if #disables singularity shortly after pinning in place
			DisableTowerField
		endif
		GetTimer1 600 eq if #Freezes everything
			50 @freeze
			"ZA WARUDO" SetText
		endif
		GetTimer1 300 eq if #Toki yo tomare
			"Toki yo tomare" SetText
		endif
		GetTimer1 200 eq if #KURAE
			"KURAE" SetText
		endif
		GetTimer1 100 eq if #Cleans freeze right before explosion
			50 @unfreeze
			"Soshite, toki wa ugoki dasu" SetText
		endif
		GetTimer1 eq0 <-ROADROLLA eq0 and if #Massconverts
			50 @convert
			150 SetTimer2
			1 ->ROADROLLA
			"ROAD ROLLA DA" SetText
		endif
		GetTimer2 eq0 <-ROADROLLA 1 eq and if #Drops a mass artifact, just for that ROADROLLA feel
			"MASS" CurrentCoords FireAoo
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			10 1 <-MovingUnit @unfrenzy 
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 6 eq if #Flip bomb. Flips 1-X times.
		<-Active eq0 if #Sets the amount of flips to perform
			<-BombSpecial 1 max ->Dups
			1 ->Active
		endif
		GetTimer1 30.0 div 0 round SetText
		<-Dups 0 gt GetTimer1 eq0 and if
			<-Radius @flip
			<-Duration 30 mul SetTimer1
			<-Dups 1 sub ->Dups
		endif
		<-Dups eq0 if
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 7 eq if #UnFrenzy, causes emitters to provide reduced output for the duration. Power is the multiplier.
		<-Active eq0 if
			<-Power 1 <-MovingUnit @unfrenzy 
			1 ->Active
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			<-Power 1 <-MovingUnit @frenzy 
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 8 eq if #nullifies emitter output indefinitely. Double-click to kill.
		<-Unchipped 1 eq if #occurs when chips is removed from factory. Prevents exploits.
			<-MovingUnit @unstop
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
		<-BombSpecial 1 eq GetTimer2 eq0 and if  #causes the effect to be permanent if bomb is special
			<-MovingUnit @stop
			60 SetTimer2
			"Emitter neutralized" SetText
			220 10 10 255 SetTextColor 20 SetTextY 1.2 SetTextSize
		endif
		GetTimer2 1 eq if
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
		GetTimer2 neq0 if
			return
		endif
		GetTimer0 eq0 <-Duration neq0 and if #If Duration is set, lasts a set amount of time.
			<-MovingUnit @unstop
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
		GetTimer0 neq0 if
			<-MovingUnit @stop
			"" SetPopupText
			GetTimer0 30.0 div 0 round SetText SetText
			return
		endif
		GetTimer1 eq0 if #If Duration is not set, lasts indefinitely. Timer 1 in this case keeps track of the last click -  you need to click twice within 3 seconds to remove.
			<-MovingUnit @stop
			0 ->Active
			"Click me twice to remove" SetPopupText
			"" SetText
		else
			GetTimer1 30.0 div 0 round SetText
		endif
		
		0 GetMouseButtonDown if #Code for finding out if we clicked.
			#Check whether the click was in the UI area of the screen. We want to ignore those clicks.
			GetMouseScreenPixelPosition 96 gt if
				#Check whether the unit is selected yet.
				<-Active not if
					GetMouseCell CurrentCoords Distance 1.5 lt if
						1 ->Active
						90 SetTimer1
						"Confirm removal by clicking again" SetPopupText
					endif
				else
					GetMouseCell CurrentCoords Distance 1.5 lt if #on double-click, removes bomb.
						<-MovingUnit @unstop
						<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
						@CancelReservation
						Self 0 Destroy
					endif
				endif
			endif
		endif
	endif
	<-BombType <-! 9 eq if #Firework bomb. Spawns fireworks for a while
		<-Active not if
			<-BombSpecial "," Split ->SpecialList
			<-SpecialList 0 GetListElement ->FpS
			<-SpecialList 1 GetListElement ->ExpRad
			1 ->Active
		endif
		GetTimer0 30 <-FpS asfloat div floor mod eq0 if
		@firework
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	<-BombType <-! 10 eq if #Tuneup bomb. Upgrades target emitter. Respects UpgradeLimit
		<-Active not if
			<-MovingUnit "EmitterInterface.crpl" "UpgradeLevel" GetScriptVar ->Current
			<-MovingUnit "EmitterInterface.crpl" "State" GetScriptVar ->SavedState
			<-MovingUnit "EmitterInterface.crpl" "BombPresent" 1 SetScriptVar
			1 ->Active
		endif
		<-Unchipped 1 eq if #occurs when chips is removed from factory. Prevents exploits.
			<-MovingUnit "EmitterInterface.crpl" "BombPresent" 0 SetScriptVar
			<-SavedState 0 gt if
				<-MovingUnit "EmitterInterface.crpl" "Changed" 1 SetScriptVar
			endif
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
		GetTimer0 30.0 div 0 round SetText
		GetTimer0 eq0 if
			@upgradeEmitter
			<-MovingUnit "EmitterInterface.crpl" "BombPresent" 0 SetScriptVar
			<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
			@CancelReservation
			Self 0 Destroy
		endif
	endif
	return
endif
<-Unchipped 1 eq if #generic unchipping fallback
	<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
	@CancelReservation
	Self 0 Destroy
endif
GetTimer3 neq0 if #If we have an ongoing timer, set the text. This supports the Death timer for bombs that have a time limit to arrive.
	GetTimer3 30.0 div 0 round SetText
	220 10 10 255 SetTextColor 20 SetTextY 1.2 SetTextSize
else
	<-BombLifeTime neq0 <-Touched and if #If we deployed the bomb and it has a time limit, kill it once we ran out of time.
		<-CreatedBy "ChipFactory.crpl" dup2 "STATE_RESET" GetScriptVar "state" swap SetScriptVar
		@CancelReservation
		Self 3 Destroy
	endif
endif
#Check for click event. this code block is used to determine where to move.
0 GetMouseButtonDown if
	#Check whether the click was in the UI area of the screen. We want to ignore those clicks.
	GetMouseScreenPixelPosition 96 gt if
		#Check whether the unit is selected yet.
		<-selected eq0 if
			GetMouseCell CurrentCoords Distance 1.5 lt if
				1 ->selected
			endif
		else
			#This else block will execute if the unit is already selected. Now we check whether the mouse location is valid.
			<-greenShadow if
				ClearQueuedMoves
				AbortMove
				@CancelReservation
				<-TargetUnit ->MovingUnit
				@ReserveSpot
				<-targetX <-targetY <-MovementSpeed QueueMove
				once
					<-BombLifeTime neq0 if #The first time we move a bomb, if it has a life time limit, set the timer for it. The actual timer handling is above.
						<-BombLifeTime 30 mul SetTimer3 
						1 ->Touched 
					endif
				endonce
				1 ->moving
                <-CreatedBy "ChipFactory.crpl" dup2 "STATE_TRAVEL" GetScriptVar "state" swap SetScriptVar
			endif
			
			0 ->greenShadow
			0 ->selected
		endif
	endif
endif

#Apply effects depending on selected state. Most of these could be triggered on change of the state instead, but I don't trust all states to be stored properly on save and load so I've updated these properties every frame. As long as there aren't tons of these units on the map it shouldn't be a performance concern.
<-selected eq0 if
	#These important part of these SetImageColor commands is the final 0. That's the alpha value. That means these calls will set the images to be invisible.
	Self "shadow" 255 0 0 0 SetImageColor
	self "selector" <-selectorRotation SetImageRotation
	Self "selector" 1.35 dup SetImageScale
	Self "range1" 255 0 0 0 SetImageColor
	<-BombType <-! 0 eq <-BombSpecial 1 gte and if
		Self "range2" 255 0 0 0 SetImageColor
	endif
	<-selectorRotation add(0.048 <-MovementSpeed mul) if(dup PI 2.0 mul gt) sub(PI 2.0 mul) endif ->selectorRotation
	<-moving if
		Self "selector" 0 0 0 0 SetImageColor
	else
		Self "selector" 10 10 255 225 SetImageColor
	endif
	#I don't really think this is necessary, but it's just to give the image a designated location after it stops following the mouse.
	self "shadow" 0 0 -1.9 SetImagePosition
else
	#If the unit is selected first we display the selector image.
	Self "selector" 255 255 255 255 SetImageColor
	<-selectorRotation add(0.096 <-MovementSpeed mul) if(dup PI 2.0 mul gt) sub(PI 2.0 mul) endif ->selectorRotation
	self "selector" <-selectorRotation SetImageRotation
	@CheckMouseForPortal
	<-greenShadow if
		Self "shadow" 0 240 0 240 SetImageColor
	else
		GetMousePosition ->my ->mx
		CurrentPixelCoords ->uy ->ux
		<-my <-uy sub ->idy
		<-mx <-ux sub ->idx
		Self "shadow" <-idx <-idy -1.9 SetImagePosition
		Self "shadow" 255 0 0 240 SetImageColor
		Self "range1" <-AC_R <-AC_G <-AC_B 255 SetImageColor
		Self "range1" <-idx <-idy -50 SetImagePosition
		<-BombType <-! 0 eq <-BombSpecial 1 gte and if
			Self "range2" <-idx <-idy -51 SetImagePosition
			Self "range2" <-C_R <-C_G <-C_B 255 SetImageColor
		endif
	endif
	#Finally, check to see if the user presses "Space" or "Escape" and deselect the unit if they do.
	"Space" GetKeyDown "Escape" GetKeyDown or if 0 ->selected endif
endif

<-moving if #If we arrived at the target, engage the explosion and remove the Timer3.
	GetQueuedMoveCount eq0 if
		@ExplodeBomp
		0 ->moving
		0 SetTimer3
	endif
endif
:awake
    0 ->Conversion #setting up types for later 
	1 ->Freeze
	2 ->Singularity
	3 ->Defuser
	4 ->Frenzy
	5 ->Omega
	5 ->OmegaORA
	6 ->Flip
	7 ->Weaken
	8 ->Stopper
	9 ->Firework
	10 ->Tuneup
	Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
    Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
    Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
    Self CONST_CREATEPZ 0 SetUnitAttribute
    Self CONST_TAKEMAPSPACE 0 SetUnitAttribute

    Self "main" <-Image SetImage
	<-BombType <-! 0 eq if #Every bomb has it's own color.
	Self "main" 10 150 150 255 SetImageColor
	endif
	<-BombType <-! 1 eq if 
	Self "main" 10 10 250 255 SetImageColor
	endif
	<-BombType <-! 2 eq if
	Self "main" 200 200 200 255 SetImageColor
	endif
	<-BombType <-! 3 eq if
	Self "main" 150 150 10 255 SetImageColor
	endif
	<-BombType <-! 4 eq if
	Self "main" 250 10 10 255 SetImageColor
	endif
	<-BombType <-! 5 eq if
	Self "main" 5 5 5 255 SetImageColor
	endif
	<-BombType <-! 6 eq if
	Self "main" 10 200 200 255 SetImageColor
	endif
	<-BombType <-! 7 eq if
	Self "main" 10 250 10 255 SetImageColor
	endif
	<-BombType <-! 8 eq if
	Self "main" 120 120 120 255 SetImageColor
	endif
	<-BombType <-! 9 eq if
	Self "main" 150 255 RandInt 150 255 RandInt 150 255 RandInt 255 SetImageColor
	endif
	<-BombType <-! 10 eq if
	Self "main" 30 30 30 255 SetImageColor
	endif
    Self "main" -2 SetImagePositionZ
    Self "shadow" "Custom19" SetImage
    Self "shadow" -1.9 SetImagePositionZ
    Self "shadow" 255 255 255 0 SetImageColor
    Self "selector" "Custom20" SetImage
    Self "selector" -3 SetImagePositionZ
    Self "selector" 255 255 255 0 SetImageColor
	Self "range1" <-ImageCircle SetImage
    Self "range1" <-Radius 2 mul 0.9 add 3.0 div dup SetImageScale
	<-BombType <-! 0 eq <-BombSpecial 1 gte and if
		Self "range2" <-ImageCircle SetImage
		Self "range2" <-BombSpecial 2 mul 1.1 add 3.0 div dup SetImageScale
	endif
    GetCreeperColors 255 mul ->AC_B 255 mul ->AC_G 255 mul ->AC_R 255 mul ->C_B 255 mul ->C_G 255 mul ->C_R


:ReserveSpot #If we targeted something, set is a occupied by a bomb so it can't be targeted by anything else.
	<-MovingUnit "CreepPortal.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "ACEmitter.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "EmitterACDeath.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "EmitterACDread.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "FlipEmitter.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "ArmoredEmitter.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "BlockerDocker.crpl" "occupied" 1 SetScriptVar
	<-MovingUnit "ACmultitower.crpl" "OccupiedBomp" 1 SetScriptVar
	<-MovingUnit "Cmultitower.crpl" "OccupiedBomp" 1 SetScriptVar
:CancelReservation #Reverse to ReserveStop
	<-MovingUnit "CreepPortal.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "ACEmitter.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "EmitterACDeath.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "EmitterACDread.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "FlipEmitter.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "ArmoredEmitter.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "BlockerDocker.crpl" "occupied" 0 SetScriptVar
	<-MovingUnit "ACmultitower.crpl" "OccupiedBomp" 0 SetScriptVar
	<-MovingUnit "Cmultitower.crpl" "OccupiedBomp" 0 SetScriptVar
:ExplodeBomp #Triggered by reaching the target. Triggers the Primed state, gets the timer going for bombs that use it, and resets some visual variables.
	1 ->Primed
	<-Duration neq0 if
		<-Duration 30 mul SetTimer0
	endif
	0 ->greenShadow
	0 ->selected
	Self "shadow" 255 0 0 0 SetImageColor
	Self "selector" 0 0 0 0 SetImageColor
	255 255 255 255 SetTextColor 0 SetTextY 1.0 SetTextSize
	"" SetText

:CheckMouseForPortal #() -> () Speficifes which bombs can target which units
    0 ->greenShadow
    GetMouseCell 1.5 GetEnemyUnitsInRange 0 do #If we are targetting a repulsor, targeting is invalid automatically.
        ->unit
        <-unit GetUnitType "CRPLCORE" eq if
			<-unit "BombRepulsor.crpl" "Name" GetScriptVar "" concat "Repulsor" eq if
				return
			endif
		endif
	loop
	GetMouseCell 1.5 GetEnemyUnitsInRange 0 do
        ->unit
        <-unit GetUnitType "CRPLCORE" eq if #Each type of bomb uses it's own set of valid targets. Target must be unoccupied to be valid.
			<-BombType "Conversion" eq <-BombType "Firework" eq or if #Conversion and firework bombs can target any type of emitter plus stargates.
				<-unit "CreepPortal.crpl" "Name" GetScriptVar "" concat "Portal" eq <-unit "CreepPortal.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ACEmitter" eq <-unit "ACEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDeath" eq <-unit "EmitterACDeath.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDread" eq <-unit "EmitterACDread.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "FlipEmitter" eq <-unit "FlipEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ArmoredEmitter" eq <-unit "ArmoredEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				or or or or or if
					@SetTargetUnit
					return
				endif
			endif
			<-BombType "Tuneup" eq if #Tuneup had unique targeting. Only targets upgradeables IF they can be upgraded.
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ACEmitter" eq <-unit "ACEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "FlipEmitter" eq <-unit "FlipEmitter.crpl" "OccupiedBomp" GetScriptVar not <-unit "FlipEmitter.crpl" "state" GetScriptVar not and and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ArmoredEmitter" eq <-unit "ArmoredEmitter.crpl" "OccupiedBomp" GetScriptVar not <-unit "ArmoredEmitter.crpl" "state" GetScriptVar not and and
				or or
				<-unit "EmitterInterface.crpl" "UpgradeEnabled" GetScriptVar 1 eq and  if
					@SetTargetUnit
					return
				endif
			endif
			<-BombType "OmegaORA" eq <-BombType "Omega" eq <-BombType "Stopper" eq or or if #Both omegas and stoppers can only target emitters.
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ACEmitter" eq <-unit "ACEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDeath" eq <-unit "EmitterACDeath.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDread" eq <-unit "EmitterACDread.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "FlipEmitter" eq <-unit "FlipEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ArmoredEmitter" eq <-unit "ArmoredEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				or or or or if
					@SetTargetUnit
					return
				endif
			endif
			<-BombType "Singularity" eq <-BombType "Freeze" eq or if #Singularities and freezer bombs can target any type of emitter plus stargates.
				<-unit "CreepPortal.crpl" "Name" GetScriptVar "" concat "Portal" eq <-unit "CreepPortal.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ACEmitter" eq <-unit "ACEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDeath" eq <-unit "EmitterACDeath.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDread" eq <-unit "EmitterACDread.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "FlipEmitter" eq <-unit "FlipEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ArmoredEmitter" eq <-unit "ArmoredEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				or or or or or if
					@SetTargetUnit
					return
				endif
			endif
			<-BombType "Frenzy" eq <-BombType "Weaken" eq or if #Frenzy and weaken bombs can only target emitters.
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ACEmitter" eq <-unit "ACEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDeath" eq <-unit "EmitterACDeath.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDread" eq <-unit "EmitterACDread.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "FlipEmitter" eq <-unit "FlipEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ArmoredEmitter" eq <-unit "ArmoredEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				or or or or if
					@SetTargetUnit
					return
				endif
            endif
			<-BombType "Defuser" eq if #Defusers can only target blue emitters + blockerDockers as fallback.
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDeath" eq <-unit "EmitterACDeath.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDread" eq <-unit "EmitterACDread.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "BlockerDocker.crpl" "IsBlockerDocker" GetScriptVar <-unit "BlockerDocker.crpl" "occupied" GetScriptVar not and
				or or if
					@SetTargetUnit
					return
				endif
            endif
			<-BombType "Flip" eq if #Flip bombs have the same targeting as conversions, but have a special case for targeting towers.
				<-unit "CreepPortal.crpl" "Name" GetScriptVar "" concat "Portal" eq <-unit "CreepPortal.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ACEmitter" eq <-unit "ACEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDeath" eq <-unit "EmitterACDeath.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "EmitterACDread" eq <-unit "EmitterACDread.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "FlipEmitter" eq <-unit "FlipEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-unit "EmitterInterface.crpl" "EmitterType" GetScriptVar "" concat "ArmoredEmitter" eq <-unit "ArmoredEmitter.crpl" "OccupiedBomp" GetScriptVar not and 
				<-BombSpecial 1 eq if #Flip bombs can conditionally target the towers.
					<-unit "ACmultitower.crpl" "Name" GetScriptVar "" concat "acmulti" eq <-unit "ACmultitower.crpl" "OccupiedBomp" GetScriptVar not and 
					<-unit "Cmultitower.crpl" "Name" GetScriptVar "" concat "cmulti" eq <-unit "Cmultitower.crpl" "OccupiedBomp" GetScriptVar not and or or
				endif
				or or or or or if
				@SetTargetUnit
					return
				endif
			endif
        endif
    loop
:SetTargetUnit #Sets the unit as a target.
1 ->greenShadow
<-unit ->TargetUnit
<-TargetUnit CONST_COORDX GetUnitAttribute ->targetX
<-TargetUnit CONST_COORDY GetUnitAttribute ->targetY
<-TargetUnit CONST_PIXELCOORDX GetUnitAttribute ->cmfp_ux
<-TargetUnit CONST_PIXELCOORDY GetUnitAttribute ->cmfp_uy
CurrentPixelCoords ->cmfp_y ->cmfp_x
<-cmfp_uy <-cmfp_y sub ->cmfp_idy
<-cmfp_ux <-cmfp_x sub ->cmfp_idx
Self "shadow" <-cmfp_idx <-cmfp_idy -1.9 SetImagePosition
Self "range1" <-cmfp_idx <-cmfp_idy -50 SetImagePosition
Self "range1" <-AC_R <-AC_G <-AC_B 255 SetImageColor
<-BombType <-! 0 eq <-BombSpecial 1 gte and if
	Self "range2" <-cmfp_idx <-cmfp_idy -51 SetImagePosition
	Self "range2" <-C_R <-C_G <-C_B 255 SetImageColor
endif


:convert #induces conversion effect. Takes Radius as parameter
		->RadCon
		"Explosion4" PlaySound
		1 CurrentPixelCoords -10 2 2 0.033 CreateEffect
		CurrentX <-RadCon add 1 add CurrentX <-RadCon sub do # J = X
			CurrentY <-RadCon add 1 add CurrentY <-RadCon sub do # I = Y
				CurrentCoords J I Distance <-RadCon lte if
					J I dup2 GetCreeper abs neg SetCreeper
				endif
			loop
		loop
:deconvert #induces deconversion effect. Takes Radius as parameter
		->DRadCon
		"Explosion4" PlaySound
		1 CurrentPixelCoords -10 2 2 0.033 CreateEffect
		CurrentX <-DRadCon add 1 add CurrentX <-DRadCon sub do # J = X
			CurrentY <-DRadCon add 1 add CurrentY <-DRadCon sub do # I = Y
				CurrentCoords J I Distance <-DRadCon lte if
					J I dup2 GetCreeper abs SetCreeper
				endif
			loop
		loop
	
:freeze #freezes. Takes Radius as parameter
		->RadFreez
			CurrentX <-RadFreez add 1 add CurrentX <-RadFreez sub do # J = X
				CurrentY <-RadFreez add 1 add CurrentY <-RadFreez sub do # I = Y
					CurrentCoords J I Distance <-RadFreez lte if
						J I 1 1 SetPinFieldCell
					endif
				loop
			loop
:unfreeze #unfreezes. Takes Radius as parameter
		->RadUFreez	
			CurrentX <-RadUFreez add 1 add CurrentX <-RadUFreez	sub do # J = X
				CurrentY <-RadUFreez add 1 add CurrentY <-RadUFreez	 sub do # I = Y
					CurrentCoords J I Distance <-RadUFreez lte if
						J I 0 0 SetPinFieldCell
					endif
				loop
			loop
:frenzy #alters emitter output, takes Power Interval Unit as parameters.
			->FrenzyTarget
			->IntervalMod
			->PowerMod
			<-FrenzyTarget "EmitterInterface.crpl" "EmitterType" GetScriptVar ->EmitterType
			<-FrenzyTarget <-EmitterType ".crpl" concat "Camt" <-FrenzyTarget <-EmitterType ".crpl" concat "Camt" GetScriptVar <-PowerMod mul SetScriptVar
			<-FrenzyTarget <-EmitterType ".crpl" concat "ACamt" <-FrenzyTarget <-EmitterType ".crpl" concat "ACamt" GetScriptVar <-PowerMod mul SetScriptVar
			<-FrenzyTarget <-EmitterType ".crpl" concat "ACinterval" <-FrenzyTarget <-EmitterType ".crpl" concat "ACinterval" GetScriptVar <-IntervalMod mul SetScriptVar
			<-FrenzyTarget <-EmitterType ".crpl" concat "Cinterval" <-FrenzyTarget <-EmitterType ".crpl" concat "Cinterval" GetScriptVar <-IntervalMod mul SetScriptVar
			

:unfrenzy #alters emitter output, takes Power Interval Unit as parameters.
			->UFrenzyTarget
			->UIntervalMod
			->UPowerMod
			<-UFrenzyTarget "EmitterInterface.crpl" "EmitterType"  GetScriptVar ->EmitterType
			<-UFrenzyTarget <-EmitterType ".crpl" concat "Camt" <-UFrenzyTarget <-EmitterType ".crpl" concat "Camt" GetScriptVar <-UPowerMod div SetScriptVar
			<-UFrenzyTarget <-EmitterType ".crpl" concat "ACamt" <-UFrenzyTarget <-EmitterType ".crpl" concat "ACamt" GetScriptVar <-UPowerMod div SetScriptVar
			<-UFrenzyTarget <-EmitterType ".crpl" concat "ACinterval" <-UFrenzyTarget <-EmitterType ".crpl" concat "ACinterval" GetScriptVar <-UIntervalMod div SetScriptVar
			<-UFrenzyTarget <-EmitterType ".crpl" concat "Cinterval" <-UFrenzyTarget <-EmitterType ".crpl" concat "Cinterval" GetScriptVar <-UIntervalMod div SetScriptVar
:flip #Flips C <-> AC. Takes Radius as the parameter.
	->RadFlip
	CurrentX <-RadFlip add 1 add CurrentX <-RadFlip sub do # J = X
					CurrentY <-RadFlip add 1 add CurrentY <-RadFlip sub do # I = Y
						CurrentCoords J I Distance <-RadFlip lte if
							J I dup2 GetCreeper neg SetCreeper
						endif
					loop
				loop	
:stop #nullifies emitter output, takes unit as parameter
			->StopTarget
			<-StopTarget "EmitterInterface.crpl" "EmitterType" GetScriptVar ->EmitterType
			<-StopTarget <-EmitterType ".crpl" concat "Unstopped" 0 SetScriptVar
:unstop #unnullifies emitter output, takes unit as parameter
			->StopTarget
			<-StopTarget "EmitterInterface.crpl" "EmitterType" GetScriptVar ->EmitterType
			<-StopTarget <-EmitterType ".crpl" concat "Unstopped" 1 SetScriptVar
:firework
			"CRPLCORE" CurrentX CurrentY CreateUnit ->LaunchedFirework
			<-LaunchedFirework "Firework.crpl" AddScriptToUnit
			<-LaunchedFirework "Firework.crpl" "Radius" <-ExpRad SetScriptVar
			<-LaunchedFirework "Firework.crpl" "Power" <-Power SetScriptVar
			<-LaunchedFirework "Firework.crpl" "TargetX" CurrentX <-Radius neg <-Radius 1 add RandInt add SetScriptVar
			<-LaunchedFirework "Firework.crpl" "TargetY" CurrentY <-Radius neg <-Radius 1 add RandInt add SetScriptVar
			
:upgradeEmitter
			<-MovingUnit "EmitterInterface.crpl" "UpgradeLimit" GetScriptVar ->Limit
			<-Current <-Limit lt <-Limit eq0 or if
				<-Current <-Power add ->Target
				<-Limit neq0 if
					<-Target <-Limit min ->Target
				endif
				<-MovingUnit "EmitterInterface.crpl" "UpgradeLevel" <-Target SetScriptVar
			endif
			<-SavedState 0 neq <-Target <-Limit neq and if
				<-MovingUnit "EmitterInterface.crpl" "Changed" 1 SetScriptVar
			else
				<-SavedState 1 eq if
					<-MovingUnit "EmitterInterface.crpl" "State" 0 SetScriptVar
				endif
			endif
			