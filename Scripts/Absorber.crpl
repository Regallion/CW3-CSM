#Absorber. Consumes nearby C and AC, bursts when overfilled. Can have effects on burst. 
$AbsorbRange:1 #Range of absorb. Square.
$AbsorbCmod:1.0 #How much of consumed creeper goes to storage.
$AbsorbACmod:1.0 #How much of consumed anticreeper goes to storage.
$StorageCapacity:100000.0 #How much can this store before bursting. 0 for infinity
$DestroyModes:"0,0,0,0" #What to do on destruction.
#First value is whether or not to leave a PZ on death
#Second value is to whether spawn rain on death. Storage is rained in increments of 100 creeper. It is not recommended to spawn more than 100 droplets.
#Third value is whether or not to dump stored creeper. Creeper is dumped at 2000 per cell, with no more 3 radius being affected.
#Fourth value is to drop a powering tower. If the value is not 0, the value is the power of the resulting tower.
$Destructible:1 #If 0, will not die on storage overflow.
$AuraModes:"0,0,0,0" #Has an effect on stuff in it's range
#Generally an aura will have 100% of it's effect if the absorber is full of AC and -100% of it's effect if it's full of C. 
#First value is whether or not it generates a health-altering field. Heals/deals that much damage every second. Will not kill non-standard units.
#Second value is whether or not it generates an ammo-altering field. Adds/removes that much ammo every second.
#Third value is whether or not whether or not it generates an acammo-altering field. Adds/removes that much acammo every second.
#Fourth value is unused
$AuraRadius:0 #Radius of the aura effect.
$Deathtimer:150 #How many frames to wait for death
#0 - does nothing except disappear.
#1 - Makes a PZ
$Name:"Absorber"
#ImageSlot can be changed if you want to use a different slot.
$ImageSlot:"Custom85"
$ImageSquare:"Custom5_256"
Once
0.0 ->storage
<-DestroyModes "," Split ->Temp
<-Temp 0 GetListElement ->LeavePZ
<-Temp 1 GetListElement ->Rain
<-Temp 2 GetListElement ->Dump
<-Temp 3 GetListElement ->TowerPower
<-AuraModes "," Split ->Temp
<-Temp 0 GetListElement ->HealthChanger
<-Temp 1 GetListElement ->AmmoChanger
<-Temp 2 GetListElement ->ACammoChanger
<-Temp 3 GetListElement ->Temp
#Export a linebreak to help with text generation.
"
" ->lb
@awake
4 delay

endonce

<-HealthChanger neq0 <-AmmoChanger neq0 or <-ACammoChanger neq0 or if

endif

<-Storage abs <-StorageCapacity gte <-dead not and <-Destructible neq0 and if
	<-Deathtimer eq0 if
		self 3 destroy
	endif
	
	0 5 RandInt ->rand
	<-rand 0 eq if
	"STORAGE OVERLOAD" SetText
	endif
	<-rand 1 eq if 
	"CONTAINMENT BREACH" SetText
	endif
	<-rand 2 eq if
	"ENGAGING DUMPING PROTOCOLS" SetText
	endif
	<-rand 3 eq if
	"UNFORTUNATE" SetText
	endif
	<-rand 4 eq if
	"TERMINATING" SetText
	endif
	50 220 50 255 SetTextColor 20 SetTextY 1.1 SetTextSize
	#Set the dead state so the emitter behaves properly in the interim period before being destroyed.
	1 ->dead
	<-Deathtimer SetTimer0
endif

<-dead if
	GetTimer0 eq0 if
		self 3 destroy
	endif
else
	CurrentX <-AbsorbRange add 1 add CurrentX <-AbsorbRange sub do # J = X
		CurrentY <-AbsorbRange add 1 add CurrentY <-AbsorbRange sub do # I = Y
			J I GetCreeper asfloat ->Value
			<-Value 0 gt if
				<-Storage <-StorageCapacity lt if
					<-Storage <-Value <-AbsorbCmod mul add  ->Storage
					J I 0 SetCreeper
				endif
			else
				<-Storage <-StorageCapacity neg gt if
					<-Storage <-Value <-AbsorbACmod mul add  ->Storage
					J I 0 SetCreeper
				endif
			endif
		loop
	loop
	<-Storage <-StorageCapacity min <-StorageCapacity neg max ->Storage
	@GeneratePopupText
	<-Storage 0 lt if
		Self "main" <-AC_R <-AC_G <-AC_B 255 <-Storage abs <-StorageCapacity div mul asint 100 max SetImageColor
	else
		<-Storage 0 gt if
			Self "main" <-C_R <-C_G <-C_B 255 <-Storage abs <-StorageCapacity div mul asint 100 max SetImageColor
		else
			Self "main" 255 255 255 255 SetImageColor
		endif
	endif
endif

<-HealthChanger neq0 <-AmmoChanger neq0 or <-ACammoChanger neq0 or GetTimer2 eq0 and if
	CreateList ->AffectedUnits
	CurrentCoords <-AuraRadius 1 GetAllUnitsInRange 0 do
		->unit
		<-AffectedUnits <-unit  AppendToList
	loop
	<-AffectedUnits GetListCount 0 do
		<-AffectedUnits I GetListElement ->TargetUnit
		<-TargetUnit CONST_ISBUILDING GetUnitAttribute 1 neq if
			<-TargetUnit CONST_HEALTH dup2 GetUnitAttribute <-HealthChanger <-Storage neg <-StorageCapacity div mul add SetUnitAttribute
			<-TargetUnit GetUnitType "CRPLCORE" neq if
				<-TargetUnit CONST_HEALTH GetUnitAttribute eq0 if
					<-TargetUnit 3 Destroy
				endif
			endif
			<-TargetUnit CONST_AMMOAC dup2 GetUnitAttribute <-ACammoChanger <-Storage neg <-StorageCapacity div mul add SetUnitAttribute
			<-TargetUnit CONST_AMMO dup2 GetUnitAttribute <-AmmoChanger <-Storage neg <-StorageCapacity div mul add SetUnitAttribute
		endif
	loop
	30 SetTimer2
endif

:awake
	ClearTraceLog
	HideTraceLog
	Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
    Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
    Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
    Self CONST_CREATEPZ 0 SetUnitAttribute
	<-LeavePZ 1 eq if
		Self CONST_CREATEPZ 1 SetUnitAttribute
	endif
	Self "main" <-ImageSlot SetImage
	Self "main" 0.8 0.3 1 <-Storage abs <-StorageCapacity  div add mul add dup SetImageScale
	GetCreeperColors 255 mul ->AC_B 255 mul ->AC_G 255 mul ->AC_R 255 mul ->C_B 255 mul ->C_G 255 mul ->C_R
	<-Storage 0 lt if
		Self "main" <-AC_R <-AC_G <-AC_B 255 <-Storage abs <-StorageCapacity div mul asint 100 max SetImageColor
	else
		<-Storage 0 gt if
			Self "main" <-C_R <-C_G <-C_B 255 <-Storage abs <-StorageCapacity div mul asint 100 max SetImageColor
		else
			Self "main" 255 255 255 255 SetImageColor
		endif
	endif
	<-AbsorbRange 0 gt if
		Self "range" <-ImageSquare SetImage
		Self "range" <-AbsorbRange 2 mul 1.0 add 3.0 div dup SetImageScale
		Self "range" 255 255 255 255 SetImageColor
	else	
		Self "range" "NONE" SetImage
	endif
	<-AuraRadius 0 gt if
		Self "rangea" <-ImageSquare SetImage
		Self "rangea" <-AuraRadius 2 mul 1.0 add 3.0 div dup SetImageScale
		Self "rangea" 0 255 0 100 SetImageColor
	else	
		Self "rangea" "NONE" SetImage
	endif
:GeneratePopupText #General method for determining popup text
"Absorber R" <-AbsorbRange concat " Cmod " concat <-AbsorbCmod concat " ACmod " concat <-AbsorbACmod concat "
 Storage at " concat <-Storage abs concat "/" concat <-StorageCapacity concat "
 " concat
 <-Storage 0 lt if
	"Currently storing anticreeper" concat ->PopupText
else
	<-Storage 0 gt if
		"Currently storing creeper" concat ->PopupText
	else
		"Currently empty" concat ->PopupText
	endif
endif
<-HealthChanger neq0 if
	<-PopupText "
Will alter the health of nearby units by " concat <-HealthChanger <-Storage neg <-StorageCapacity div mul 2 round  concat " every second" concat ->PopupText
endif
<-AmmoChanger neq0 if
	<-PopupText "
Will alter the ammo of nearby units by " concat <-AmmoChanger <-Storage neg <-StorageCapacity div mul 2 round  concat " every second" concat ->PopupText
endif
<-ACammoChanger neq0 if
	<-PopupText "
Will alter the AC stores of nearby units by " concat <-ACammoChanger <-Storage neg <-StorageCapacity div mul 2 round concat " every second" concat ->PopupText
endif
<-LeavePZ if
	<-PopupText "
Will leave behind a Power Zone on death" concat ->PopupText
endif
<-Rain if
	<-PopupText "
Will violently launch storage contents into the air on death" concat ->PopupText
endif
<-Dump if
	<-PopupText "
Will leak storage contents on death" concat ->PopupText
endif
<-TowerPower neq0 if
	<-PopupText "
Will leave behind a " concat <-TowerPower concat " power tower on death" concat ->PopupText
endif
<-PopupText SetPopupText
:destroyed
<-Rain if
	<-Storage abs asfloat 100.0 div floor ->Droplets
	<-Droplets 1 gt if
		<-Droplets 100 <-Storage <-Storage abs div mul MakeRain
	else
		<-Storage asfloat 15.0 div floor 15 MakeRain
	endif
endif
<-Dump if
	<-Storage abs asfloat 2000.0 div ceil sqrt floor 3 min ->Radius
	<-Storage asfloat <-Radius 2 mul 1 add 2 pow div 2000 min ->CreeperPower
	CurrentX <-Radius add 1 add CurrentX <-Radius sub do # J = X
		CurrentY <-Radius add 1 add CurrentY <-Radius sub do # I = Y
			J I <-CreeperPower SetCreeper
		loop
	loop
endif
<-TowerPower neq0 if
	"CRPLCORE" CurrentX CurrentY CreateUnit ->Tower
	<-Tower "ACmultitower.crpl" AddScriptToUnit
	<-Tower "ACmultitower.crpl" "Power" <-TowerPower SetScriptVar
endif