#This unit will plug the stargate it's currently on top of. It is meant to start in the player area and can be moved any time. It can only be moved to stargates, however. Unit will be selected when you click on it. A shadow will follow the mouse when selected. The shadow will initially be red, but will change to green and snap to the center of the gate if you mouse over a stargate. Clicking on a stargate when the shadow is green will queue a move to the stargate. If a move is already queued, the move will first be cancelled. If leaving a stargate, run the uncap function. Upon arriving at a new stargate, the cap function will be run. The cap/uncap functions will simply cause the portal in question to toggle between their true color value and -1.

#Will need image for selector and highlighter, also a shadow image. 

#other scripts modified to accomodate this script: CreepPortal



$Name:"StargatePlug"
$Size:3
$MovementSpeed:0.25
$HighlighterSize:2.0


once
	@awake
	<-Conduction 0 eq if
		Self "dot" 0 0 0 255 SetImageColor
	else
		<-Conduction 1 eq if
			Self "dot" 50 50 255 255 SetImageColor
		else
			Self "dot" 255 255 255 255 SetImageColor
		endif
	endif
	<-Size @ChangeSize
	##Initialize state variables##
	-1 ->tetheredGate
	-1 ->targetGate
    -1 ->movingGate
	0 ->moving
	0 ->selected
	0 ->greenShadow
	0.0 ->selectorRotation
	#Delay for 1 frame so the portals can cache their true color before the plug interferes
	1 Delay
endonce

once
	#check here if there is already a gate under me and plug it if so
	@FindAndLockGate
endonce

####This selection code was snipped from my AC Bertha script and modified slightly (with comments also modified)####

#Check for click event
0 GetMouseButtonDown if
	#Check whether the click was in the UI area of the screen. We want to ignore those clicks.
	GetMouseScreenPixelPosition 96 gt if
		#Check whether the unit is selected yet.
		<-selected eq0 if
			#If the unit is not currently selected, we check to see if the click happened within a certain radius of the unit.
			# 2 -> 0.75, 3 -> 1, 4 -> 2
			GetMouseCell CurrentCoords Distance @CalculateClickRadius lt if
				#Make sure we didn't already select another unit this click
				"selected" 1 GetCoresWithVar dup eq0 if
					pop
					#Sets the selected state. We'll get to applying the effects in another block.
					1 ->selected
				else
					0 do
						pop
					loop
				endif
				#Kill the selection process if shift is held. Multi unit selection should not be possible for this unit, including for vanilla units.
				"RightShift" GetKey neq0 "LeftShift" GetKey neq0 or if
					0 ->selected
				endif
				#The 1 delay is to prevent aberrant behavior with clicks being processed multiple times.
				1 Delay
			endif
		else
			#This else block will execute if the unit is already selected. Now we check whether the mouse location is valid.
			<-greenShadow if
                @UnoccupySg
                <-targetGate ->movingGate
                @OccupySg
				1 ->readymove
				<-tetheredGate -1 neq if
					@UnlockGate
				endif
			endif
			
			0 ->greenShadow
			0 ->selected
		endif
	endif
endif

#Apply effects depending on selected state. Most of these could be triggered on change of the state instead, but I don't trust all states to be stored properly on save and load so I've updated these properties every frame. As long as there aren't tons of these units on the map it shouldn't be a performance concern.
<-selected eq0 if
	#These important part of these SetImageColor commands is the final 0. That's the alpha value. That means these calls will set the images to be invisible.
	Self "shadow" 255 0 0 0 SetImageColor
	self "selector" <-selectorRotation SetImageRotation
	Self "selector" <-HighlighterSize dup SetImageScale
	<-selectorRotation add(0.048 <-MovementSpeed mul) if(dup PI 2.0 mul gt) sub(PI 2.0 mul) endif ->selectorRotation
	<-moving if
		Self "selector" 0 0 0 0 SetImageColor
	else
		Self "selector" 10 255 10 225 SetImageColor
	endif
	#I don't really think this is necessary, but it's just to give the image a designated location after it stops following the mouse.
	self "shadow" 0 0 -1.9 SetImagePosition
else
	#If the unit is selected first we display the selector image.
	Self "selector" 255 255 255 255 SetImageColor
	<-selectorRotation add(0.096 <-MovementSpeed mul) if(dup PI 2.0 mul gt) sub(PI 2.0 mul) endif ->selectorRotation
	self "selector" <-selectorRotation SetImageRotation
	@CheckMouseForPortal
	<-greenShadow if
		Self "shadow" 0 240 0 240 SetImageColor
	else
		GetMousePosition ->my ->mx
		CurrentPixelCoords ->uy ->ux
		<-my <-uy sub ->idy
		<-mx <-ux sub ->idx
		Self "shadow" <-idx <-idy -1.9 SetImagePosition
		Self "shadow" 255 0 0 240 SetImageColor
	endif
	#Finally, check to see if the user presses "Space" or "Escape" and deselect the unit if they do.
	"Space" GetKeyDown "Escape" GetKeyDown or if 0 ->selected endif
endif

<-readymove isPaused not and if
	CurrentPixelCoords ->Y ->X
	<-movingGate CONST_PIXELCOORDX GetUnitAttribute ->TX
	<-movingGate CONST_PIXELCOORDY GetUnitAttribute ->TY
	CurrentPixelCoords <-TX <-TY Distance <-MovementSpeed lte if
		<-TX ->NewX
		<-TY ->NewY
		Self CONST_PIXELCOORDX <-NewX SetUnitAttribute
		Self CONST_PIXELCOORDY <-NewY SetUnitAttribute
		0 ->readymove
		return
	endif
	<-TX <-X sub ->Xdiff
	<-TY <-Y sub ->Ydiff
	<-Ydiff <-Xdiff atan2 ->Tangel
	<-Tangel cos <-MovementSpeed mul <-X add ->NewX
	<-Tangel sin <-MovementSpeed mul <-Y add ->NewY

	Self CONST_PIXELCOORDX <-NewX SetUnitAttribute
	Self CONST_PIXELCOORDY <-NewY SetUnitAttribute
	1 ->moving
endif

CurrentPixelCoords <-movingGate CONST_PIXELCOORDY GetUnitAttribute eq swap <-movingGate CONST_PIXELCOORDX GetUnitAttribute eq and <-moving and if
	@FindAndLockGate
	0 ->readymove
	0 ->moving
endif

:awake
ClearTraceLog
HideTraceLog
Self CONST_COUNTSFORVICTORY 0 SetUnitAttribute 
Self CONST_NULLIFIERDAMAGES 0 SetUnitAttribute 
Self CONST_SUPPORTSDIGITALIS 0 SetUnitAttribute 
Self CONST_CREATEPZ 0 SetUnitAttribute
TRUE OperateWhilePaused

Self "main" "Custom18" SetImage
Self "main" -2 SetImagePositionZ
Self "shadow" "Custom19" SetImage
Self "shadow" -1.9 SetImagePositionZ
Self "shadow" 255 255 255 0 SetImageColor
Self "selector" "Custom20" SetImage
Self "selector" -3 SetImagePositionZ
Self "selector" 255 255 255 0 SetImageColor

:FindAndLockGate 
CurrentCoords 1 GetEnemyUnitsInRange 0 do
	->unit
	<-unit GetUnitType "CRPLCORE" eq if
		<-unit "CreepPortal.crpl" "Size" GetScriptVar if
			<-unit ->tetheredGate
            <-unit ->movingGate
			-1 ->targetGate
            @OccupySg
			<-tetheredGate CONST_COORDX GetUnitAttribute ->falg_tx
			<-tetheredGate CONST_COORDY GetUnitAttribute ->falg_ty
			Self CONST_COORDX <-falg_tx SetUnitAttribute
			Self CONST_COORDY <-falg_ty SetUnitAttribute
			@LockGate
			return
		endif
	endif
loop

:LockGate
<-tetheredGate "CreepPortal.crpl" "colorID" -1 SetScriptVar
<-tetheredGate "CreepPortal.crpl" "Size" GetScriptVar @TrueSizeToSize @ChangeSize


:UnlockGate
<-tetheredGate "CreepPortal.crpl" "trueColor" GetScriptVar ->ug_trueColor
<-tetheredGate "CreepPortal.crpl" "colorID" <-ug_trueColor SetScriptVar
-1 ->tetheredGate
3 @ChangeSize

:ChangeSize #(int newSize) -> ()
->cs_size
<-cs_size ->Size
<-cs_size 1 eq if
	Self "main" 0.15 0.15 SetImageScale
	Self "shadow" 0.15 0.15 SetImageScale
	Self "selector" 0.3 0.3 SetImageScale
else
	<-cs_size 2 eq if
		Self "main" 0.3 0.3 SetImageScale
		Self "shadow" 0.3 0.3 SetImageScale
		Self "selector" 0.6 0.6 SetImageScale
	else
		<-cs_size 3 eq if
			Self "main" 0.55 0.55 SetImageScale
			Self "shadow" 0.55 0.55 SetImageScale
			Self "selector" 1 1 SetImageScale
		else
			<-cs_size 4 eq if
				Self "main" 0.875 0.875 SetImageScale
				Self "shadow" 0.875 0.875 SetImageScale
				Self "selector" 1.75 1.75 SetImageScale
			endif
		endif
	endif
endif

:ChangeShadowSize #(int newSize) -> ()
->css_size
<-css_size 1 eq if
	Self "shadow" 0.15 0.15 SetImageScale
else
	<-css_size 2 eq if
		Self "shadow" 0.3 0.3 SetImageScale
	else
		<-css_size 3 eq if
			Self "shadow" 0.55 0.55 SetImageScale
		else
			<-css_size 4 eq if
				Self "shadow" 0.875 0.875 SetImageScale
			endif
		endif
	endif
endif

:SizeToTrueSize # (int size) -> (int trueSize)
->stts_size
<-stts_size 1 eq if
1 return
else
	<-stts_size 2 eq if
	5 return
	else
		<-stts_size 3 eq if
		9 return
		else
		25 return
		endif
	endif
endif


:TrueSizeToSize	# (int size) -> (int trueSize)
->tsts_size
<-tsts_size 1 eq if
1 return
else
	<-tsts_size 5 eq if
	2 return
	else
		<-tsts_size 9 eq if
		3 return
		else
		4 return
		endif
	endif
endif

:CalculateClickRadius #() -> (float radius)
# 2 -> 0.75, 3 -> 1, 4 -> 2
<-Size 2 eq if
	0.75 return
else
	<-Size 3 eq if
		1.0 return
	else
		2.0 return
	endif
endif

:OccupySg
    <-movingGate -1 neq if
        <-movingGate "CreepPortal.crpl" "occupied" 1 SetScriptVar
		<-movingGate "BlockerDocker.crpl" "occupied" 1 SetScriptVar
    endif

:UnoccupySg
    <-movingGate -1 neq if
        <-movingGate "CreepPortal.crpl" "occupied" 0 SetScriptVar
		<-movingGate "BlockerDocker.crpl" "occupied" 0 SetScriptVar
    endif

:CheckMouseForPortal #() -> ()

GetMouseCell 1 GetEnemyUnitsInRange 0 do
	->unit
	<-unit GetUnitType "CRPLCORE" eq if
        <-unit "BlockerDocker.crpl" "IsBlockerDocker" GetScriptVar <-unit "BlockerDocker.crpl" "occupied" GetScriptVar 0 eq and if
			1 ->greenShadow
			<-unit ->targetGate
			<-unit CONST_PIXELCOORDX GetUnitAttribute ->cmfp_ux
			<-unit CONST_PIXELCOORDY GetUnitAttribute ->cmfp_uy
            2 @ChangeShadowSize
			CurrentPixelCoords ->cmfp_y ->cmfp_x
			<-cmfp_uy <-cmfp_y sub ->cmfp_idy
			<-cmfp_ux <-cmfp_x sub ->cmfp_idx
			Self "shadow" <-cmfp_idx <-cmfp_idy -1.9 SetImagePosition
            return
        endif
		<-unit "CreepPortal.crpl" "occupied" GetScriptVar <-unit "BlockerDocker.crpl" "Occupied" GetScriptVar or if
			break
		endif
		<-unit "CreepPortal.crpl" "Size" GetScriptVar if
			1 ->greenShadow
			<-unit ->targetGate
			<-unit CONST_PIXELCOORDX GetUnitAttribute ->cmfp_ux
			<-unit CONST_PIXELCOORDY GetUnitAttribute ->cmfp_uy
			<-unit "CreepPortal.crpl" "Size" GetScriptVar @TrueSizeToSize @ChangeShadowSize
			CurrentPixelCoords ->cmfp_y ->cmfp_x
			<-cmfp_uy <-cmfp_y sub ->cmfp_idy
			<-cmfp_ux <-cmfp_x sub ->cmfp_idx
			Self "shadow" <-cmfp_idx <-cmfp_idy -1.9 SetImagePosition
			return
		endif
	endif
loop
0 ->greenShadow

